{"version":3,"sources":["degreeservice.js","maincontroller.js","programcontroller.js","collegecontroller.js","degreedirectives.js","app.js"],"names":["DegreeSearch","Services","DegreeService","$http","$location","this","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","prototype","getDegreeResults","query","args","successCallback","errorCallback","params","search","colleges","college","program_types","programType","page","get","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","$inject","Controllers","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","registerRoute","setDefaults","parsePath","$watch","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","pagination","previousPage","nextPage","goToPage","RegExp","default_program_type","default_college","enabled_routes","enabledRoutes","forEach","route","path","matches","exec","pagePad","$","document","innerWidth","startPage","endPage","i","push","ProgramController","mainCtl","$parent","programTypes","setProgramTypes","init","addHandlers","programSuccess","registerRoutes","programError","onQueryChange","programSlugs","type","slug","join","unshift","name","count","onSelected","value","updateCounts","counts","CollegeController","setColleges","collegeSuccess","collegeError","Directives","searchFormDirective","restrict","replace","template","search_form_template","searchResultsDirective","search_results_template","programTypesDirective","program_types_template","collegesDirective","colleges_template","paginationDirective","pagination_template","resultCountDirective","result_count_template","loadingDirective","loading_template","noResultsDirective","no_results_template","angular","module","controller","service","directive"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n                this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n            }\n            DegreeService.prototype.getDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: args.college,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1,\n                    limit: args.limit ? args.limit : this.limit\n                };\n\n                this.http.get(this.apiUrl + '/degrees', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypesCounts = function (query, college, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: college\n                };\n\n                params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n                this.http.get(this.apiUrl + '/program-types/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getColleges = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/colleges').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getCollegesCounts = function (query, programType, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    program_types: programType\n                };\n\n                params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n                this.http.get(this.apiUrl + '/colleges/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n                this.pages = new Array();\n                this.routeRegExps = {\n                    college: null,\n                    program: null,\n                    search: null\n                };\n\n                this.registerRoute();\n                this.setDefaults();\n                this.parsePath();\n                this.scope.$watch('mainCtl.searchQuery', function (query) {\n                    _this.handleInput(query);\n                });\n            }\n            MainController.prototype.getSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n                var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n                this.degreeService.getDegreeResults(this.searchQuery, {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                }, function (response) {\n                    _this.successHandler(response);\n                }, function (response) {\n                    _this.errorHandler(response);\n                });\n            };\n\n            MainController.prototype.successHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n                this.buildLocation();\n                this.pagination();\n            };\n\n            MainController.prototype.errorHandler = function (response) {\n                this.results = {};\n            };\n\n            MainController.prototype.handleInput = function (query) {\n                this.searchQuery = query;\n                this.currentPage = 1;\n                this.buildLocation();\n                this.getSearchResults();\n            };\n\n            MainController.prototype.previousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.nextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.getSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.goToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.registerRoute = function () {\n                this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n            };\n\n            MainController.prototype.setDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.parsePath = function () {\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college && this.routeRegExps.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                    }\n                }\n\n                if (this.enabledRoutes.program && this.routeRegExps.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                    }\n                }\n\n                if (this.enabledRoutes.search && this.routeRegExps.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    }\n                }\n            };\n\n            MainController.prototype.buildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n\n                this.location.path(path);\n            };\n\n            MainController.prototype.pagination = function () {\n                var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n                var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n                var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n                // Reset the array\n                this.pages = new Array();\n\n                for (var i = startPage; i <= endPage; i++) {\n                    this.pages.push(i);\n                }\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var ProgramController = (function () {\n            function ProgramController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.programTypes = new Array();\n                this.setProgramTypes(true);\n            }\n            ProgramController.prototype.setProgramTypes = function (init) {\n                var _this = this;\n                if (typeof init === \"undefined\") { init = false; }\n                this.degreeService.getProgramTypes(function (response) {\n                    if (init) {\n                        _this.addHandlers();\n                    }\n\n                    _this.programSuccess(response);\n                    _this.registerRoutes();\n                }, function (response) {\n                    _this.programError(response);\n                });\n            };\n\n            ProgramController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (query) {\n                    _this.onQueryChange();\n                });\n                this.scope.$watch('mainCtl.selectedCollege', function () {\n                    _this.onQueryChange();\n                });\n            };\n\n            ProgramController.prototype.registerRoutes = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n                });\n\n                this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n            };\n\n            ProgramController.prototype.programSuccess = function (response) {\n                this.programTypes = response.data;\n                this.programTypes.unshift({\n                    name: 'All',\n                    slug: 'all',\n                    count: this.mainCtl.totalResults\n                });\n            };\n\n            ProgramController.prototype.programError = function (response) {\n                this.programTypes = new Array();\n            };\n\n            ProgramController.prototype.onSelected = function (value) {\n                this.mainCtl.selectedProgramType = value;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            ProgramController.prototype.onQueryChange = function () {\n                var _this = this;\n                this.degreeService.getProgramTypesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedCollege, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    // Error occurred. Remove count.\n                    _this.programTypes.forEach(function (type) {\n                        type.count = null;\n                    });\n                });\n            };\n\n            ProgramController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                this.programTypes.forEach(function (type) {\n                    if (typeof counts[type.slug] !== 'undefined') {\n                        type.count = counts[type.slug];\n                    } else {\n                        type.count = 0;\n                    }\n                });\n            };\n            ProgramController.$inject = ['$scope', 'DegreeService'];\n            return ProgramController;\n        })();\n        Controllers.ProgramController = ProgramController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var CollegeController = (function () {\n            function CollegeController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.colleges = new Array();\n                this.setColleges(true);\n            }\n            CollegeController.prototype.setColleges = function (init) {\n                var _this = this;\n                if (typeof init === \"undefined\") { init = false; }\n                this.degreeService.getColleges(function (response) {\n                    if (init) {\n                        _this.addHandlers();\n                    }\n                    _this.collegeSuccess(response);\n                    _this.registerRoutes();\n                }, function (response) {\n                    _this.collegeError(response);\n                });\n            };\n\n            CollegeController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function () {\n                    _this.onQueryChange();\n                });\n                this.scope.$watch('mainCtl.selectedProgramType', function () {\n                    _this.onQueryChange();\n                });\n            };\n\n            CollegeController.prototype.registerRoutes = function () {\n                this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n            };\n\n            CollegeController.prototype.collegeSuccess = function (response) {\n                this.colleges = response.data;\n                this.colleges.unshift({\n                    name: 'All',\n                    slug: 'all',\n                    count: this.mainCtl.totalResults\n                });\n            };\n\n            CollegeController.prototype.collegeError = function (response) {\n                this.colleges = new Array();\n            };\n\n            CollegeController.prototype.onSelected = function (value) {\n                this.mainCtl.selectedCollege = value;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n                this.onQueryChange();\n            };\n\n            CollegeController.prototype.onQueryChange = function () {\n                var _this = this;\n                this.degreeService.getCollegesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedProgramType, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    _this.colleges.forEach(function (college) {\n                        college.count = null;\n                    });\n                });\n            };\n\n            CollegeController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                this.colleges.forEach(function (college) {\n                    if (typeof counts[college.slug] !== 'undefined') {\n                        college.count = counts[college.slug];\n                    } else {\n                        college.count = 0;\n                    }\n                });\n            };\n            CollegeController.$inject = ['$scope', 'DegreeService'];\n            return CollegeController;\n        })();\n        Controllers.CollegeController = CollegeController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function searchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_form_template\n            };\n        }\n        Directives.searchFormDirective = searchFormDirective;\n\n        function searchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.searchResultsDirective = searchResultsDirective;\n\n        function programTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.programTypesDirective = programTypesDirective;\n\n        function collegesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n            };\n        }\n        Directives.collegesDirective = collegesDirective;\n\n        function paginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.paginationDirective = paginationDirective;\n\n        function resultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.resultCountDirective = resultCountDirective;\n\n        function loadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.loadingDirective = loadingDirective;\n\n        function noResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.noResultsDirective = noResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n","angular.module('DegreeSearchApp', []);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n"]}