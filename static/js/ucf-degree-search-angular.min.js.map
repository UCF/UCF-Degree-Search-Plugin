{"version":3,"sources":["degreeservice.js","maincontroller.js","programcontroller.js","collegecontroller.js","degreedirectives.js","encodingfilter.js","app.js"],"names":["DegreeSearch","Services","DegreeService","$http","$location","this","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","prototype","getDegreeResults","query","args","successCallback","errorCallback","params","search","colleges","college","program_types","programType","page","get","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","$inject","Controllers","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","updateHeading","update_heading","updateTitle","update_title","setTimeout","init","registerRoute","setDefaults","parsePath","$heading","$","$watch","newValue","oldValue","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","buildResultMessage","pagination","googleDataLayerUpdate","setHeading","setTitle","resultMessage","setWpSpeak","selectedProgramTypeDisplay","selectedCollegeDisplay","message","wp","a11y","speak","headingString","text","title","prefix","suffix","push","replace","prefixString","join","suffixString","length","document","newVal","oldVal","previousPage","nextPage","goToPage","RegExp","default_program_type","default_college","enabled_routes","enabledRoutes","forEach","route","path","matches","exec","find","x","slug","fullname","plural","pagePad","innerWidth","startPage","endPage","i","dataLayer","event","degreeSearchTerm","degreeSearchProgramTypes","degreeSearchCollege","ProgramController","mainCtl","$parent","programTypes","addHandlers","registerRoutes","onQueryChange","programSlugs","type","onSelected","value","selected","updateCounts","count","counts","all","CollegeController","Directives","searchFormDirective","restrict","template","atts","retval","search_form_template","placeholder","searchResultsDirective","search_results_template","programTypesDirective","program_types_template","collegesDirective","colleges_template","paginationDirective","pagination_template","resultCountDirective","result_count_template","loadingDirective","loading_template","noResultsDirective","no_results_template","Filters","convertEncoding","input","html","angular","module","controller","service","directive","filter"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n                this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n            }\n            DegreeService.prototype.getDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: args.college,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1,\n                    limit: args.limit ? args.limit : this.limit\n                };\n\n                this.http.get(this.apiUrl + '/degrees', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypesCounts = function (query, college, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: college\n                };\n\n                params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n                this.http.get(this.apiUrl + '/program-types/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getColleges = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/colleges').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getCollegesCounts = function (query, programType, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    program_types: programType\n                };\n\n                params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n                this.http.get(this.apiUrl + '/colleges/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n                this.pages = new Array();\n                this.routeRegExps = {\n                    college: null,\n                    program: null,\n                    search: null\n                };\n\n                this.updateHeading = UCF_DEGREE_SEARCH_ANGULAR.update_heading;\n                this.updateTitle = UCF_DEGREE_SEARCH_ANGULAR.update_title;\n\n                setTimeout(function () {\n                    _this.init();\n                }, 0);\n            }\n            MainController.prototype.init = function () {\n                var _this = this;\n                this.registerRoute();\n                this.setDefaults();\n                this.parsePath();\n\n                if (this.updateHeading) {\n                    this.$heading = $('h1');\n                }\n                this.scope.$watch('mainCtl.searchQuery', function (newValue, oldValue) {\n                    _this.handleInput(newValue, oldValue);\n                });\n                this.getSearchResults();\n            };\n\n            MainController.prototype.getSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n                var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n                this.degreeService.getDegreeResults(this.searchQuery, {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                }, function (response) {\n                    _this.successHandler(response);\n                }, function (response) {\n                    _this.errorHandler(response);\n                });\n            };\n\n            MainController.prototype.successHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n                this.buildLocation();\n                this.buildResultMessage();\n                this.pagination();\n                this.googleDataLayerUpdate();\n\n                if (this.updateHeading) {\n                    this.setHeading();\n                }\n\n                if (this.updateTitle) {\n                    this.setTitle();\n                }\n            };\n\n            MainController.prototype.errorHandler = function (response) {\n                this.results = {};\n            };\n\n            MainController.prototype.buildResultMessage = function () {\n                if (this.totalResults === 0) {\n                    this.resultMessage = '';\n                    this.setWpSpeak(\"No results found for \" + this.searchQuery);\n                } else {\n                    this.resultMessage = \"Showing \" + this.startIndex + \" through \" + this.endIndex + \" of \" + this.totalResults + \" results\";\n\n                    if (this.searchQuery && this.searchQuery !== '') {\n                        this.resultMessage += \" for \" + this.searchQuery;\n                    }\n\n                    if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                        this.resultMessage += \" in \" + this.selectedProgramTypeDisplay;\n                    }\n\n                    if (this.selectedCollege && this.selectedCollege !== 'all') {\n                        this.resultMessage += \" at the \" + this.selectedCollegeDisplay;\n                    }\n\n                    this.resultMessage += \" at UCF.\";\n\n                    this.setWpSpeak(this.resultMessage);\n                }\n            };\n\n            MainController.prototype.setWpSpeak = function (message) {\n                wp.a11y.speak(message);\n            };\n\n            MainController.prototype.setHeading = function () {\n                var headingString = 'Degree Search';\n\n                if (this.searchQuery) {\n                    headingString += ' - ' + this.searchQuery + ' Programs at UCF';\n                }\n\n                this.$heading.text(headingString);\n            };\n\n            MainController.prototype.setTitle = function () {\n                var title = 'Degree Search', prefix = [], suffix = [];\n\n                if (this.searchQuery && this.searchQuery !== '') {\n                    prefix.push(this.searchQuery);\n                }\n\n                if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                    suffix.push(this.selectedProgramTypeDisplay.replace(' Degrees', ''));\n                }\n\n                if (this.selectedCollege && this.selectedCollege !== 'all') {\n                    suffix.push(this.selectedCollegeDisplay);\n                }\n\n                var prefixString = prefix.join(' ') + ' ' + title;\n                var suffixString = suffix.join(', ') + ' Degrees';\n\n                if (suffixString.length === 0) {\n                    suffixString = 'University of Central Florida Academic Programs';\n                }\n\n                document.title = prefixString + ' | ' + suffixString;\n            };\n\n            MainController.prototype.handleInput = function (newVal, oldVal) {\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.searchQuery = newVal;\n                this.currentPage = 1;\n                this.buildLocation();\n                this.getSearchResults();\n            };\n\n            MainController.prototype.previousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.nextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.getSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.goToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.registerRoute = function () {\n                this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n            };\n\n            MainController.prototype.setDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.parsePath = function () {\n                var _this = this;\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college && this.routeRegExps.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                        var college = UCF_DEGREE_SEARCH_ANGULAR.colleges.find(function (x) {\n                            return x.slug == _this.selectedCollege;\n                        });\n                        this.selectedCollegeDisplay = college.fullname;\n                    }\n                }\n\n                if (this.enabledRoutes.program && this.routeRegExps.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                        var programType = UCF_DEGREE_SEARCH_ANGULAR.program_types.find(function (x) {\n                            return x.slug == _this.selectedProgramType;\n                        });\n                        this.selectedProgramTypeDisplay = programType.plural;\n                    }\n                }\n\n                if (this.enabledRoutes.search && this.routeRegExps.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    }\n                }\n            };\n\n            MainController.prototype.buildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n\n                this.location.path(path);\n            };\n\n            MainController.prototype.pagination = function () {\n                var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n                var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n                var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n                // Reset the array\n                this.pages = new Array();\n\n                for (var i = startPage; i <= endPage; i++) {\n                    this.pages.push(i);\n                }\n            };\n\n            MainController.prototype.googleDataLayerUpdate = function () {\n                if (typeof dataLayer !== 'undefined') {\n                    dataLayer.push({\n                        'event': 'degreeSearchFilterChange',\n                        'degreeSearchTerm': this.searchQuery,\n                        'degreeSearchProgramTypes': this.selectedProgramType,\n                        'degreeSearchCollege': this.selectedCollege\n                    });\n                }\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var ProgramController = (function () {\n            function ProgramController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.programTypes = new Array();\n\n                this.addHandlers();\n            }\n            ProgramController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.program_types) {\n                    this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n                }\n\n                this.registerRoutes();\n            };\n\n            ProgramController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n                this.scope.$watch('mainCtl.selectedCollege', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n            };\n\n            ProgramController.prototype.registerRoutes = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n                });\n\n                this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n            };\n\n            ProgramController.prototype.onSelected = function (value) {\n                var selected = this.programTypes.find(function (x) {\n                    return x.slug === value;\n                });\n                this.mainCtl.selectedProgramType = selected.slug;\n                this.mainCtl.selectedProgramTypeDisplay = selected.plural;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            ProgramController.prototype.onQueryChange = function (newVal, oldVal) {\n                var _this = this;\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.degreeService.getProgramTypesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedCollege, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    // Error occurred. Remove count.\n                    _this.programTypes.forEach(function (type) {\n                        type.count = null;\n                    });\n                });\n            };\n\n            ProgramController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                if (counts.all === 0) {\n                    return;\n                }\n\n                this.programTypes.forEach(function (type) {\n                    if (typeof counts[type.slug] !== 'undefined') {\n                        type.count = counts[type.slug];\n                    } else {\n                        type.count = 0;\n                    }\n                });\n            };\n            ProgramController.$inject = ['$scope', 'DegreeService'];\n            return ProgramController;\n        })();\n        Controllers.ProgramController = ProgramController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var CollegeController = (function () {\n            function CollegeController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.colleges = new Array();\n\n                this.addHandlers();\n            }\n            CollegeController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.colleges) {\n                    this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n                }\n\n                this.registerRoutes();\n            };\n\n            CollegeController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n                this.scope.$watch('mainCtl.selectedProgramType', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n            };\n\n            CollegeController.prototype.registerRoutes = function () {\n                this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n            };\n\n            CollegeController.prototype.onSelected = function (value) {\n                var selected = this.colleges.find(function (x) {\n                    return x.slug == value;\n                });\n                this.mainCtl.selectedCollege = selected.slug;\n                this.mainCtl.selectedCollegeDisplay = selected.fullname;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            CollegeController.prototype.onQueryChange = function (newVal, oldVal) {\n                var _this = this;\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.degreeService.getCollegesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedProgramType, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    _this.colleges.forEach(function (college) {\n                        college.count = null;\n                    });\n                });\n            };\n\n            CollegeController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                if (counts.all === 0) {\n                    return;\n                }\n\n                this.colleges.forEach(function (college) {\n                    if (typeof counts[college.slug] !== 'undefined') {\n                        college.count = counts[college.slug];\n                    } else {\n                        college.count = 0;\n                    }\n                });\n            };\n            CollegeController.$inject = ['$scope', 'DegreeService'];\n            return CollegeController;\n        })();\n        Controllers.CollegeController = CollegeController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function searchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: function (scope, atts) {\n                    var retval = UCF_DEGREE_SEARCH_ANGULAR.search_form_template;\n                    if (atts.placeholder) {\n                        retval = retval.replace('{{atts.placeholder}}', atts.placeholder);\n                    }\n                    return retval;\n                }\n            };\n        }\n        Directives.searchFormDirective = searchFormDirective;\n\n        function searchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.searchResultsDirective = searchResultsDirective;\n\n        function programTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.programTypesDirective = programTypesDirective;\n\n        function collegesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n            };\n        }\n        Directives.collegesDirective = collegesDirective;\n\n        function paginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.paginationDirective = paginationDirective;\n\n        function resultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.resultCountDirective = resultCountDirective;\n\n        function loadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.loadingDirective = loadingDirective;\n\n        function noResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.noResultsDirective = noResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Filters) {\n        function convertEncoding() {\n            return function (input) {\n                return $('<span>').html(input).text();\n            };\n        }\n        Filters.convertEncoding = convertEncoding;\n    })(DegreeSearch.Filters || (DegreeSearch.Filters = {}));\n    var Filters = DegreeSearch.Filters;\n})(DegreeSearch || (DegreeSearch = {}));\n","angular.module('DegreeSearchApp', []);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n\nangular.module('DegreeSearchApp').filter('convertEncoding', DegreeSearch.Filters.convertEncoding);\n"]}