{"version":3,"sources":["degreeservice.js","maincontroller.js","programcontroller.js","collegecontroller.js","degreedirectives.js","encodingfilter.js","app.js"],"names":["DegreeSearch","Services","DegreeService","$http","$location","this","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","prototype","getDegreeResults","query","args","successCallback","errorCallback","params","search","colleges","college","program_types","programType","page","get","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","$inject","Controllers","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","setTimeout","init","registerRoute","setDefaults","parsePath","$watch","newValue","oldValue","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","pagination","newVal","oldVal","previousPage","nextPage","goToPage","RegExp","default_program_type","default_college","enabled_routes","enabledRoutes","forEach","route","path","matches","exec","pagePad","$","document","innerWidth","startPage","endPage","i","push","ProgramController","mainCtl","$parent","programTypes","addHandlers","registerRoutes","onQueryChange","programSlugs","type","slug","join","onSelected","value","updateCounts","count","counts","CollegeController","Directives","searchFormDirective","restrict","replace","template","atts","retval","search_form_template","placeholder","searchResultsDirective","search_results_template","programTypesDirective","program_types_template","collegesDirective","colleges_template","paginationDirective","pagination_template","resultCountDirective","result_count_template","loadingDirective","loading_template","noResultsDirective","no_results_template","Filters","convertEncoding","input","html","text","angular","module","controller","service","directive","filter"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n                this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n            }\n            DegreeService.prototype.getDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: args.college,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1,\n                    limit: args.limit ? args.limit : this.limit\n                };\n\n                this.http.get(this.apiUrl + '/degrees', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypesCounts = function (query, college, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: college\n                };\n\n                params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n                this.http.get(this.apiUrl + '/program-types/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getColleges = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/colleges').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getCollegesCounts = function (query, programType, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    program_types: programType\n                };\n\n                params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n                this.http.get(this.apiUrl + '/colleges/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n                this.pages = new Array();\n                this.routeRegExps = {\n                    college: null,\n                    program: null,\n                    search: null\n                };\n\n                setTimeout(function () {\n                    _this.init();\n                }, 0);\n            }\n            MainController.prototype.init = function () {\n                var _this = this;\n                this.registerRoute();\n                this.setDefaults();\n                this.parsePath();\n                this.scope.$watch('mainCtl.searchQuery', function (newValue, oldValue) {\n                    _this.handleInput(newValue, oldValue);\n                });\n                this.getSearchResults();\n            };\n\n            MainController.prototype.getSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n                var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n                this.degreeService.getDegreeResults(this.searchQuery, {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                }, function (response) {\n                    _this.successHandler(response);\n                }, function (response) {\n                    _this.errorHandler(response);\n                });\n            };\n\n            MainController.prototype.successHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n                this.buildLocation();\n                this.pagination();\n            };\n\n            MainController.prototype.errorHandler = function (response) {\n                this.results = {};\n            };\n\n            MainController.prototype.handleInput = function (newVal, oldVal) {\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.searchQuery = newVal;\n                this.currentPage = 1;\n                this.buildLocation();\n                this.getSearchResults();\n            };\n\n            MainController.prototype.previousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.nextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.getSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.goToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.registerRoute = function () {\n                this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n            };\n\n            MainController.prototype.setDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.parsePath = function () {\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college && this.routeRegExps.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                    }\n                }\n\n                if (this.enabledRoutes.program && this.routeRegExps.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                    }\n                }\n\n                if (this.enabledRoutes.search && this.routeRegExps.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    }\n                }\n            };\n\n            MainController.prototype.buildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n\n                this.location.path(path);\n            };\n\n            MainController.prototype.pagination = function () {\n                var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n                var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n                var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n                // Reset the array\n                this.pages = new Array();\n\n                for (var i = startPage; i <= endPage; i++) {\n                    this.pages.push(i);\n                }\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var ProgramController = (function () {\n            function ProgramController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.programTypes = new Array();\n\n                this.addHandlers();\n            }\n            ProgramController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.program_types) {\n                    this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n                }\n\n                this.registerRoutes();\n            };\n\n            ProgramController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n                this.scope.$watch('mainCtl.selectedCollege', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n            };\n\n            ProgramController.prototype.registerRoutes = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n                });\n\n                this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n            };\n\n            ProgramController.prototype.onSelected = function (value) {\n                this.mainCtl.selectedProgramType = value;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            ProgramController.prototype.onQueryChange = function (newVal, oldVal) {\n                var _this = this;\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.degreeService.getProgramTypesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedCollege, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    // Error occurred. Remove count.\n                    _this.programTypes.forEach(function (type) {\n                        type.count = null;\n                    });\n                });\n            };\n\n            ProgramController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                this.programTypes.forEach(function (type) {\n                    if (typeof counts[type.slug] !== 'undefined') {\n                        type.count = counts[type.slug];\n                    } else {\n                        type.count = 0;\n                    }\n                });\n            };\n            ProgramController.$inject = ['$scope', 'DegreeService'];\n            return ProgramController;\n        })();\n        Controllers.ProgramController = ProgramController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var CollegeController = (function () {\n            function CollegeController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.colleges = new Array();\n\n                this.addHandlers();\n            }\n            CollegeController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.colleges) {\n                    this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n                }\n\n                this.registerRoutes();\n            };\n\n            CollegeController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n                this.scope.$watch('mainCtl.selectedProgramType', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n            };\n\n            CollegeController.prototype.registerRoutes = function () {\n                this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n            };\n\n            CollegeController.prototype.onSelected = function (value) {\n                this.mainCtl.selectedCollege = value;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            CollegeController.prototype.onQueryChange = function (newVal, oldVal) {\n                var _this = this;\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.degreeService.getCollegesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedProgramType, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    _this.colleges.forEach(function (college) {\n                        college.count = null;\n                    });\n                });\n            };\n\n            CollegeController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                this.colleges.forEach(function (college) {\n                    if (typeof counts[college.slug] !== 'undefined') {\n                        college.count = counts[college.slug];\n                    } else {\n                        college.count = 0;\n                    }\n                });\n            };\n            CollegeController.$inject = ['$scope', 'DegreeService'];\n            return CollegeController;\n        })();\n        Controllers.CollegeController = CollegeController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function searchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: function (scope, atts) {\n                    var retval = UCF_DEGREE_SEARCH_ANGULAR.search_form_template;\n                    if (atts.placeholder) {\n                        retval = retval.replace('{{atts.placeholder}}', atts.placeholder);\n                    }\n                    return retval;\n                }\n            };\n        }\n        Directives.searchFormDirective = searchFormDirective;\n\n        function searchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.searchResultsDirective = searchResultsDirective;\n\n        function programTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.programTypesDirective = programTypesDirective;\n\n        function collegesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n            };\n        }\n        Directives.collegesDirective = collegesDirective;\n\n        function paginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.paginationDirective = paginationDirective;\n\n        function resultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.resultCountDirective = resultCountDirective;\n\n        function loadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.loadingDirective = loadingDirective;\n\n        function noResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.noResultsDirective = noResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Filters) {\n        function convertEncoding() {\n            return function (input) {\n                return $('<span>').html(input).text();\n            };\n        }\n        Filters.convertEncoding = convertEncoding;\n    })(DegreeSearch.Filters || (DegreeSearch.Filters = {}));\n    var Filters = DegreeSearch.Filters;\n})(DegreeSearch || (DegreeSearch = {}));\n","angular.module('DegreeSearchApp', []);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n\nangular.module('DegreeSearchApp').filter('convertEncoding', DegreeSearch.Filters.convertEncoding);\n"]}