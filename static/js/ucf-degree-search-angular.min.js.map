{"version":3,"sources":["maincontroller.js","handlebar-helpers.js","degreeservice.js","programcontroller.js","ucf-degree-search-angular.min.js","collegecontroller.js","degreedirectives.js","encodingfilter.js","app.js"],"names":["stripDegree","input","replace","capitalize","splitInput","split","retval","exceptions","forEach","s","i","length","charAt","toUpperCase","substr","toLowerCase","indexOf","join","self","URLSearchParamsPolyfill","search","URLSearchParams","toString","this","__URLSearchParams__","parseToDict","encode","str","!","'","(",")","~","%20","%00","encodeURIComponent","match","decode","decodeURIComponent","makeIterator","arr","iterator","next","value","shift","done","undefined","iterable","Symbol","dict","isArray","item","TypeError","appendTo","key","hasOwnProperty","slice","pairs","j","index","name","val","JSON","stringify","push","Object","prototype","call","obj","prop","nativeURLSearchParams","get","e","isSupportObjectConstructor","a","decodesPlusesCorrectly","encodesAmpersandsCorrectly","ampersandTest","append","has","getAll","set","query","forSureUsePolyfill","useProxy","Proxy","defineProperty","construct","target","args","USPProto","polyfill","callback","thisArg","getOwnPropertyNames","sort","k","keys","values","items","entries","global","window","Handlebars","registerHelper","DegreeSearch","Services","DegreeService","$http","$location","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","getDegreeResults","successCallback","errorCallback","params","colleges","college","program_types","programType","page","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","$inject","Controllers","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","hasFilters","updateHeading","update_heading","updateTitle","update_title","setTimeout","init","registerRoute","setDefaults","parsePath","$heading","$","$watch","newValue","oldValue","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","buildResultMessage","pagination","googleDataLayerUpdate","setHeading","setTitle","resultMessage","setWpSpeak","selectedProgramTypeDisplay","selectedCollegeDisplay","message","wp","a11y","speak","headingTemplate","heading_template","headingFn","compile","html","titleTemplate","title_template","titleFn","document","title","newVal","oldVal","previousPage","nextPage","goToPage","RegExp","default_program_type","default_college","enabled_routes","enabledRoutes","route","path","matches","exec","find","x","slug","fullname","selected","parent","type","children","c","selectedParentProgramType","pagePad","innerWidth","startPage","endPage","dataLayer","event","degreeSearchTerm","degreeSearchProgramTypes","degreeSearchCollege","ProgramController","mainCtl","$parent","programTypes","registerRoutes","programSlugs","child","onClear","onSelected","CollegeController","Directives","searchFormDirective","restrict","template","atts","search_form_template","placeholder","searchResultsDirective","search_results_template","programTypesDirective","program_types_template","collegesDirective","colleges_template","paginationDirective","pagination_template","resultCountDirective","result_count_template","loadingDirective","loading_template","noResultsDirective","no_results_template","Filters","convertEncoding","text","app","angular","module","config","$locationProvider","html5Mode","controller","service","directive","filter"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n                this.pages = new Array();\n                this.routeRegExps = {\n                    college: null,\n                    program: null,\n                    search: null\n                };\n                this.hasFilters = false;\n\n                this.updateHeading = UCF_DEGREE_SEARCH_ANGULAR.update_heading;\n                this.updateTitle = UCF_DEGREE_SEARCH_ANGULAR.update_title;\n\n                setTimeout(function () {\n                    _this.init();\n                }, 0);\n            }\n            MainController.prototype.init = function () {\n                var _this = this;\n                this.registerRoute();\n                this.setDefaults();\n                this.parsePath();\n\n                if (this.updateHeading) {\n                    this.$heading = $('h1');\n                }\n                this.scope.$watch('mainCtl.searchQuery', function (newValue, oldValue) {\n                    _this.handleInput(newValue, oldValue);\n                });\n                this.getSearchResults();\n            };\n\n            MainController.prototype.getSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n                var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n                if (this.searchQuery || this.selectedProgramType || this.selectedCollege) {\n                    this.hasFilters = true;\n                } else {\n                    this.hasFilters = false;\n                }\n\n                this.degreeService.getDegreeResults(this.searchQuery, {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                }, function (response) {\n                    _this.successHandler(response);\n                }, function (response) {\n                    _this.errorHandler(response);\n                });\n            };\n\n            MainController.prototype.successHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n                this.buildLocation();\n                this.buildResultMessage();\n                this.pagination();\n                this.googleDataLayerUpdate();\n\n                if (this.updateHeading) {\n                    this.setHeading();\n                }\n\n                if (this.updateTitle) {\n                    this.setTitle();\n                }\n            };\n\n            MainController.prototype.errorHandler = function (response) {\n                this.results = {};\n            };\n\n            MainController.prototype.buildResultMessage = function () {\n                if (this.totalResults === 0) {\n                    this.resultMessage = '';\n                    this.setWpSpeak(\"No results found for \" + this.searchQuery);\n                } else {\n                    this.resultMessage = \"Showing \" + this.startIndex + \" through \" + this.endIndex + \" of \" + this.totalResults + \" results\";\n\n                    if (this.searchQuery && this.searchQuery !== '') {\n                        this.resultMessage += \" for \" + this.searchQuery;\n                    }\n\n                    if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                        this.resultMessage += \" in \" + this.selectedProgramTypeDisplay;\n                    }\n\n                    if (this.selectedCollege && this.selectedCollege !== 'all') {\n                        this.resultMessage += \" at the \" + this.selectedCollegeDisplay;\n                    }\n\n                    this.resultMessage += \" at UCF.\";\n\n                    this.setWpSpeak(this.resultMessage);\n                }\n            };\n\n            MainController.prototype.setWpSpeak = function (message) {\n                wp.a11y.speak(message);\n            };\n\n            MainController.prototype.setHeading = function () {\n                var headingTemplate = UCF_DEGREE_SEARCH_ANGULAR.heading_template, headingFn = Handlebars.compile(headingTemplate);\n\n                this.$heading.html(headingFn(this));\n            };\n\n            MainController.prototype.setTitle = function () {\n                var titleTemplate = UCF_DEGREE_SEARCH_ANGULAR.title_template, titleFn = Handlebars.compile(titleTemplate);\n\n                document.title = titleFn(this);\n            };\n\n            MainController.prototype.handleInput = function (newVal, oldVal) {\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.searchQuery = newVal;\n                this.currentPage = 1;\n                this.buildLocation();\n                this.getSearchResults();\n            };\n\n            MainController.prototype.previousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.nextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.getSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.goToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.registerRoute = function () {\n                this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n            };\n\n            MainController.prototype.setDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.parsePath = function () {\n                var _this = this;\n                // Parse query params\n                var params = new URLSearchParams(location.search);\n\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college && this.routeRegExps.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                    } else if (params.has('college[0]')) {\n                        this.selectedCollege = params.get('college[0]');\n                    } else if (params.has('colleges')) {\n                        this.selectedCollege = params.get('colleges');\n                    }\n\n                    if (this.selectedCollege) {\n                        var college = UCF_DEGREE_SEARCH_ANGULAR.colleges.find(function (x) {\n                            return x.slug == _this.selectedCollege;\n                        });\n                        if (college) {\n                            this.selectedCollegeDisplay = college.fullname;\n                        }\n                    }\n                }\n\n                if (this.enabledRoutes.program && this.routeRegExps.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                    } else if (params.has('program-type[0]')) {\n                        this.selectedProgramType = params.get('program-type[0]');\n                    } else if (params.has('program_types')) {\n                        this.selectedProgramType = params.get('program_types');\n                    }\n\n                    if (this.selectedProgramType) {\n                        var selected = UCF_DEGREE_SEARCH_ANGULAR.program_types.find(function (x) {\n                            return x.slug === _this.selectedProgramType;\n                        });\n                        var parent = null;\n\n                        if (!selected) {\n                            UCF_DEGREE_SEARCH_ANGULAR.program_types.forEach(function (type) {\n                                var match = type.children.find(function (c) {\n                                    return c.slug === _this.selectedProgramType;\n                                });\n\n                                if (match) {\n                                    selected = match;\n                                    parent = type;\n                                }\n                            });\n                        } else {\n                            parent = selected;\n                        }\n\n                        this.selectedParentProgramType = parent.slug;\n                        this.selectedProgramTypeDisplay = selected.name;\n                    }\n\n                    this.location.search({});\n                }\n\n                if (this.enabledRoutes.search && this.routeRegExps.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    } else if (params.has('search')) {\n                        this.searchQuery = params.get('search');\n                    }\n                }\n\n                this.location.search({});\n            };\n\n            MainController.prototype.buildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n\n                this.location.path(path);\n            };\n\n            MainController.prototype.pagination = function () {\n                var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n                var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n                var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n                // Reset the array\n                this.pages = new Array();\n\n                for (var i = startPage; i <= endPage; i++) {\n                    this.pages.push(i);\n                }\n            };\n\n            MainController.prototype.googleDataLayerUpdate = function () {\n                if (typeof dataLayer !== 'undefined') {\n                    dataLayer.push({\n                        'event': 'degreeSearchFilterChange',\n                        'degreeSearchTerm': this.searchQuery,\n                        'degreeSearchProgramTypes': this.selectedProgramType,\n                        'degreeSearchCollege': this.selectedCollege\n                    });\n                }\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","if (typeof Handlebars !== 'undefined') {\n    function stripDegree(input) {\n        return input.replace(' Degree', '').replace(' Degrees', '').replace('Program', '').replace('Programs', '');\n    }\n\n    function capitalize(input) {\n        var splitInput = input.split(' '), retval = [], exceptions = ['a', 'an', 'the', 'at', 'by', 'for', 'in', 'of', 'on', 'to', 'up', 'and', 'as', 'but', 'or', 'nor'];\n\n        splitInput.forEach(function (s, i) {\n            // Capitalize first and last always\n            if (i === 0 || i === splitInput.length - 1) {\n                retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n            } else {\n                // If it's not an exception, capitalize it\n                if (exceptions.indexOf(s) === -1) {\n                    retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n                } else {\n                    retval[i] = s;\n                }\n            }\n        });\n\n        return retval.join(' ');\n    }\n\n    Handlebars.registerHelper('stripDegree', stripDegree);\n    Handlebars.registerHelper('capitalize', capitalize);\n}\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n                this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n            }\n            DegreeService.prototype.getDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: args.college,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1,\n                    limit: args.limit ? args.limit : this.limit\n                };\n\n                this.http.get(this.apiUrl + '/degrees', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypesCounts = function (query, college, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: college\n                };\n\n                params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n                this.http.get(this.apiUrl + '/program-types/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getColleges = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/colleges').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getCollegesCounts = function (query, programType, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    program_types: programType\n                };\n\n                params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n                this.http.get(this.apiUrl + '/colleges/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var ProgramController = (function () {\n            function ProgramController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.programTypes = new Array();\n            }\n            ProgramController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.program_types) {\n                    this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n                }\n\n                this.registerRoutes();\n            };\n\n            ProgramController.prototype.registerRoutes = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n\n                    if (type.children.length > 0) {\n                        type.children.forEach(function (child) {\n                            programSlugs.push(child.slug);\n                        });\n                    }\n                });\n\n                this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n            };\n\n            ProgramController.prototype.onClear = function () {\n                this.mainCtl.selectedProgramType = 'all';\n                this.mainCtl.selectedProgramTypeDisplay = '';\n                this.mainCtl.selectedParentProgramType = '';\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            ProgramController.prototype.onSelected = function (value) {\n                var selected = this.programTypes.find(function (x) {\n                    return x.slug === value;\n                });\n                var parent = null;\n\n                if (!selected) {\n                    this.programTypes.forEach(function (type) {\n                        var match = type.children.find(function (c) {\n                            return c.slug === value;\n                        });\n\n                        if (match) {\n                            selected = match;\n                            parent = type;\n                        }\n                    });\n                } else {\n                    parent = selected;\n                }\n\n                this.mainCtl.selectedProgramType = selected.slug;\n                this.mainCtl.selectedProgramTypeDisplay = selected.name;\n                this.mainCtl.selectedParentProgramType = parent.slug;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n            ProgramController.$inject = ['$scope', 'DegreeService'];\n            return ProgramController;\n        })();\n        Controllers.ProgramController = ProgramController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","/**\n *\n *\n * @author Jerry Bendy <jerry@icewingcc.com>\n * @licence MIT\n *\n */\n\n(function(self) {\n    'use strict';\n\n    var nativeURLSearchParams = (function() {\n            // #41 Fix issue in RN\n            try {\n                if (self.URLSearchParams && (new self.URLSearchParams('foo=bar')).get('foo') === 'bar') {\n                    return self.URLSearchParams;\n                }\n            } catch (e) {}\n            return null;\n        })(),\n        isSupportObjectConstructor = nativeURLSearchParams && (new nativeURLSearchParams({a: 1})).toString() === 'a=1',\n        // There is a bug in safari 10.1 (and earlier) that incorrectly decodes `%2B` as an empty space and not a plus.\n        decodesPlusesCorrectly = nativeURLSearchParams && (new nativeURLSearchParams('s=%2B').get('s') === '+'),\n        __URLSearchParams__ = \"__URLSearchParams__\",\n        // Fix bug in Edge which cannot encode ' &' correctly\n        encodesAmpersandsCorrectly = nativeURLSearchParams ? (function() {\n            var ampersandTest = new nativeURLSearchParams();\n            ampersandTest.append('s', ' &');\n            return ampersandTest.toString() === 's=+%26';\n        })() : true,\n        prototype = URLSearchParamsPolyfill.prototype,\n        iterable = !!(self.Symbol && self.Symbol.iterator);\n\n    if (nativeURLSearchParams && isSupportObjectConstructor && decodesPlusesCorrectly && encodesAmpersandsCorrectly) {\n        return;\n    }\n\n\n    /**\n     * Make a URLSearchParams instance\n     *\n     * @param {object|string|URLSearchParams} search\n     * @constructor\n     */\n    function URLSearchParamsPolyfill(search) {\n        search = search || \"\";\n\n        // support construct object with another URLSearchParams instance\n        if (search instanceof URLSearchParams || search instanceof URLSearchParamsPolyfill) {\n            search = search.toString();\n        }\n        this [__URLSearchParams__] = parseToDict(search);\n    }\n\n\n    /**\n     * Appends a specified key/value pair as a new search parameter.\n     *\n     * @param {string} name\n     * @param {string} value\n     */\n    prototype.append = function(name, value) {\n        appendTo(this [__URLSearchParams__], name, value);\n    };\n\n    /**\n     * Deletes the given search parameter, and its associated value,\n     * from the list of all search parameters.\n     *\n     * @param {string} name\n     */\n    prototype['delete'] = function(name) {\n        delete this [__URLSearchParams__] [name];\n    };\n\n    /**\n     * Returns the first value associated to the given search parameter.\n     *\n     * @param {string} name\n     * @returns {string|null}\n     */\n    prototype.get = function(name) {\n        var dict = this [__URLSearchParams__];\n        return this.has(name) ? dict[name][0] : null;\n    };\n\n    /**\n     * Returns all the values association with a given search parameter.\n     *\n     * @param {string} name\n     * @returns {Array}\n     */\n    prototype.getAll = function(name) {\n        var dict = this [__URLSearchParams__];\n        return this.has(name) ? dict [name].slice(0) : [];\n    };\n\n    /**\n     * Returns a Boolean indicating if such a search parameter exists.\n     *\n     * @param {string} name\n     * @returns {boolean}\n     */\n    prototype.has = function(name) {\n        return hasOwnProperty(this [__URLSearchParams__], name);\n    };\n\n    /**\n     * Sets the value associated to a given search parameter to\n     * the given value. If there were several values, delete the\n     * others.\n     *\n     * @param {string} name\n     * @param {string} value\n     */\n    prototype.set = function set(name, value) {\n        this [__URLSearchParams__][name] = ['' + value];\n    };\n\n    /**\n     * Returns a string containg a query string suitable for use in a URL.\n     *\n     * @returns {string}\n     */\n    prototype.toString = function() {\n        var dict = this[__URLSearchParams__], query = [], i, key, name, value;\n        for (key in dict) {\n            name = encode(key);\n            for (i = 0, value = dict[key]; i < value.length; i++) {\n                query.push(name + '=' + encode(value[i]));\n            }\n        }\n        return query.join('&');\n    };\n\n    // There is a bug in Safari 10.1 and `Proxy`ing it is not enough.\n    var forSureUsePolyfill = !decodesPlusesCorrectly;\n    var useProxy = (!forSureUsePolyfill && nativeURLSearchParams && !isSupportObjectConstructor && self.Proxy);\n    /*\n     * Apply polifill to global object and append other prototype into it\n     */\n    Object.defineProperty(self, 'URLSearchParams', {\n        value: (useProxy ?\n            // Safari 10.0 doesn't support Proxy, so it won't extend URLSearchParams on safari 10.0\n            new Proxy(nativeURLSearchParams, {\n                construct: function(target, args) {\n                    return new target((new URLSearchParamsPolyfill(args[0]).toString()));\n                }\n            }) :\n            URLSearchParamsPolyfill)\n    });\n\n    var USPProto = self.URLSearchParams.prototype;\n\n    USPProto.polyfill = true;\n\n    /**\n     *\n     * @param {function} callback\n     * @param {object} thisArg\n     */\n    USPProto.forEach = USPProto.forEach || function(callback, thisArg) {\n        var dict = parseToDict(this.toString());\n        Object.getOwnPropertyNames(dict).forEach(function(name) {\n            dict[name].forEach(function(value) {\n                callback.call(thisArg, value, name, this);\n            }, this);\n        }, this);\n    };\n\n    /**\n     * Sort all name-value pairs\n     */\n    USPProto.sort = USPProto.sort || function() {\n        var dict = parseToDict(this.toString()), keys = [], k, i, j;\n        for (k in dict) {\n            keys.push(k);\n        }\n        keys.sort();\n\n        for (i = 0; i < keys.length; i++) {\n            this['delete'](keys[i]);\n        }\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i], values = dict[key];\n            for (j = 0; j < values.length; j++) {\n                this.append(key, values[j]);\n            }\n        }\n    };\n\n    /**\n     * Returns an iterator allowing to go through all keys of\n     * the key/value pairs contained in this object.\n     *\n     * @returns {function}\n     */\n    USPProto.keys = USPProto.keys || function() {\n        var items = [];\n        this.forEach(function(item, name) {\n            items.push(name);\n        });\n        return makeIterator(items);\n    };\n\n    /**\n     * Returns an iterator allowing to go through all values of\n     * the key/value pairs contained in this object.\n     *\n     * @returns {function}\n     */\n    USPProto.values = USPProto.values || function() {\n        var items = [];\n        this.forEach(function(item) {\n            items.push(item);\n        });\n        return makeIterator(items);\n    };\n\n    /**\n     * Returns an iterator allowing to go through all key/value\n     * pairs contained in this object.\n     *\n     * @returns {function}\n     */\n    USPProto.entries = USPProto.entries || function() {\n        var items = [];\n        this.forEach(function(item, name) {\n            items.push([name, item]);\n        });\n        return makeIterator(items);\n    };\n\n\n    if (iterable) {\n        USPProto[self.Symbol.iterator] = USPProto[self.Symbol.iterator] || USPProto.entries;\n    }\n\n\n    function encode(str) {\n        var replace = {\n            '!': '%21',\n            \"'\": '%27',\n            '(': '%28',\n            ')': '%29',\n            '~': '%7E',\n            '%20': '+',\n            '%00': '\\x00'\n        };\n        return encodeURIComponent(str).replace(/[!'\\(\\)~]|%20|%00/g, function(match) {\n            return replace[match];\n        });\n    }\n\n    function decode(str) {\n        return str\n            .replace(/[ +]/g, '%20')\n            .replace(/(%[a-f0-9]{2})+/ig, function(match) {\n                return decodeURIComponent(match);\n            });\n    }\n\n    function makeIterator(arr) {\n        var iterator = {\n            next: function() {\n                var value = arr.shift();\n                return {done: value === undefined, value: value};\n            }\n        };\n\n        if (iterable) {\n            iterator[self.Symbol.iterator] = function() {\n                return iterator;\n            };\n        }\n\n        return iterator;\n    }\n\n    function parseToDict(search) {\n        var dict = {};\n\n        if (typeof search === \"object\") {\n            // if `search` is an array, treat it as a sequence\n            if (isArray(search)) {\n                for (var i = 0; i < search.length; i++) {\n                    var item = search[i];\n                    if (isArray(item) && item.length === 2) {\n                        appendTo(dict, item[0], item[1]);\n                    } else {\n                        throw new TypeError(\"Failed to construct 'URLSearchParams': Sequence initializer must only contain pair elements\");\n                    }\n                }\n\n            } else {\n                for (var key in search) {\n                    if (search.hasOwnProperty(key)) {\n                        appendTo(dict, key, search[key]);\n                    }\n                }\n            }\n\n        } else {\n            // remove first '?'\n            if (search.indexOf(\"?\") === 0) {\n                search = search.slice(1);\n            }\n\n            var pairs = search.split(\"&\");\n            for (var j = 0; j < pairs.length; j++) {\n                var value = pairs [j],\n                    index = value.indexOf('=');\n\n                if (-1 < index) {\n                    appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index + 1)));\n\n                } else {\n                    if (value) {\n                        appendTo(dict, decode(value), '');\n                    }\n                }\n            }\n        }\n\n        return dict;\n    }\n\n    function appendTo(dict, name, value) {\n        var val = typeof value === 'string' ? value : (\n            value !== null && value !== undefined && typeof value.toString === 'function' ? value.toString() : JSON.stringify(value)\n        );\n\n        // #47 Prevent using `hasOwnProperty` as a property name\n        if (hasOwnProperty(dict, name)) {\n            dict[name].push(val);\n        } else {\n            dict[name] = [val];\n        }\n    }\n\n    function isArray(val) {\n        return !!val && '[object Array]' === Object.prototype.toString.call(val);\n    }\n\n    function hasOwnProperty(obj, prop) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n\n})(typeof global !== 'undefined' ? global : (typeof window !== 'undefined' ? window : this));\nif (typeof Handlebars !== 'undefined') {\n    function stripDegree(input) {\n        return input.replace(' Degree', '').replace(' Degrees', '').replace('Program', '').replace('Programs', '');\n    }\n\n    function capitalize(input) {\n        var splitInput = input.split(' '), retval = [], exceptions = ['a', 'an', 'the', 'at', 'by', 'for', 'in', 'of', 'on', 'to', 'up', 'and', 'as', 'but', 'or', 'nor'];\n\n        splitInput.forEach(function (s, i) {\n            // Capitalize first and last always\n            if (i === 0 || i === splitInput.length - 1) {\n                retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n            } else {\n                // If it's not an exception, capitalize it\n                if (exceptions.indexOf(s) === -1) {\n                    retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n                } else {\n                    retval[i] = s;\n                }\n            }\n        });\n\n        return retval.join(' ');\n    }\n\n    Handlebars.registerHelper('stripDegree', stripDegree);\n    Handlebars.registerHelper('capitalize', capitalize);\n}\n\nvar DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n                this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n            }\n            DegreeService.prototype.getDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: args.college,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1,\n                    limit: args.limit ? args.limit : this.limit\n                };\n\n                this.http.get(this.apiUrl + '/degrees', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypesCounts = function (query, college, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: college\n                };\n\n                params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n                this.http.get(this.apiUrl + '/program-types/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getColleges = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/colleges').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getCollegesCounts = function (query, programType, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    program_types: programType\n                };\n\n                params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n                this.http.get(this.apiUrl + '/colleges/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n\nvar DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n                this.pages = new Array();\n                this.routeRegExps = {\n                    college: null,\n                    program: null,\n                    search: null\n                };\n                this.hasFilters = false;\n\n                this.updateHeading = UCF_DEGREE_SEARCH_ANGULAR.update_heading;\n                this.updateTitle = UCF_DEGREE_SEARCH_ANGULAR.update_title;\n\n                setTimeout(function () {\n                    _this.init();\n                }, 0);\n            }\n            MainController.prototype.init = function () {\n                var _this = this;\n                this.registerRoute();\n                this.setDefaults();\n                this.parsePath();\n\n                if (this.updateHeading) {\n                    this.$heading = $('h1');\n                }\n                this.scope.$watch('mainCtl.searchQuery', function (newValue, oldValue) {\n                    _this.handleInput(newValue, oldValue);\n                });\n                this.getSearchResults();\n            };\n\n            MainController.prototype.getSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n                var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n                if (this.searchQuery || this.selectedProgramType || this.selectedCollege) {\n                    this.hasFilters = true;\n                } else {\n                    this.hasFilters = false;\n                }\n\n                this.degreeService.getDegreeResults(this.searchQuery, {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                }, function (response) {\n                    _this.successHandler(response);\n                }, function (response) {\n                    _this.errorHandler(response);\n                });\n            };\n\n            MainController.prototype.successHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n                this.buildLocation();\n                this.buildResultMessage();\n                this.pagination();\n                this.googleDataLayerUpdate();\n\n                if (this.updateHeading) {\n                    this.setHeading();\n                }\n\n                if (this.updateTitle) {\n                    this.setTitle();\n                }\n            };\n\n            MainController.prototype.errorHandler = function (response) {\n                this.results = {};\n            };\n\n            MainController.prototype.buildResultMessage = function () {\n                if (this.totalResults === 0) {\n                    this.resultMessage = '';\n                    this.setWpSpeak(\"No results found for \" + this.searchQuery);\n                } else {\n                    this.resultMessage = \"Showing \" + this.startIndex + \" through \" + this.endIndex + \" of \" + this.totalResults + \" results\";\n\n                    if (this.searchQuery && this.searchQuery !== '') {\n                        this.resultMessage += \" for \" + this.searchQuery;\n                    }\n\n                    if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                        this.resultMessage += \" in \" + this.selectedProgramTypeDisplay;\n                    }\n\n                    if (this.selectedCollege && this.selectedCollege !== 'all') {\n                        this.resultMessage += \" at the \" + this.selectedCollegeDisplay;\n                    }\n\n                    this.resultMessage += \" at UCF.\";\n\n                    this.setWpSpeak(this.resultMessage);\n                }\n            };\n\n            MainController.prototype.setWpSpeak = function (message) {\n                wp.a11y.speak(message);\n            };\n\n            MainController.prototype.setHeading = function () {\n                var headingTemplate = UCF_DEGREE_SEARCH_ANGULAR.heading_template, headingFn = Handlebars.compile(headingTemplate);\n\n                this.$heading.html(headingFn(this));\n            };\n\n            MainController.prototype.setTitle = function () {\n                var titleTemplate = UCF_DEGREE_SEARCH_ANGULAR.title_template, titleFn = Handlebars.compile(titleTemplate);\n\n                document.title = titleFn(this);\n            };\n\n            MainController.prototype.handleInput = function (newVal, oldVal) {\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.searchQuery = newVal;\n                this.currentPage = 1;\n                this.buildLocation();\n                this.getSearchResults();\n            };\n\n            MainController.prototype.previousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.nextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.getSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.goToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.registerRoute = function () {\n                this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n            };\n\n            MainController.prototype.setDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.parsePath = function () {\n                var _this = this;\n                // Parse query params\n                var params = new URLSearchParams(location.search);\n\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college && this.routeRegExps.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                    } else if (params.has('college[0]')) {\n                        this.selectedCollege = params.get('college[0]');\n                    } else if (params.has('colleges')) {\n                        this.selectedCollege = params.get('colleges');\n                    }\n\n                    if (this.selectedCollege) {\n                        var college = UCF_DEGREE_SEARCH_ANGULAR.colleges.find(function (x) {\n                            return x.slug == _this.selectedCollege;\n                        });\n                        if (college) {\n                            this.selectedCollegeDisplay = college.fullname;\n                        }\n                    }\n                }\n\n                if (this.enabledRoutes.program && this.routeRegExps.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                    } else if (params.has('program-type[0]')) {\n                        this.selectedProgramType = params.get('program-type[0]');\n                    } else if (params.has('program_types')) {\n                        this.selectedProgramType = params.get('program_types');\n                    }\n\n                    if (this.selectedProgramType) {\n                        var selected = UCF_DEGREE_SEARCH_ANGULAR.program_types.find(function (x) {\n                            return x.slug === _this.selectedProgramType;\n                        });\n                        var parent = null;\n\n                        if (!selected) {\n                            UCF_DEGREE_SEARCH_ANGULAR.program_types.forEach(function (type) {\n                                var match = type.children.find(function (c) {\n                                    return c.slug === _this.selectedProgramType;\n                                });\n\n                                if (match) {\n                                    selected = match;\n                                    parent = type;\n                                }\n                            });\n                        } else {\n                            parent = selected;\n                        }\n\n                        this.selectedParentProgramType = parent.slug;\n                        this.selectedProgramTypeDisplay = selected.name;\n                    }\n\n                    this.location.search({});\n                }\n\n                if (this.enabledRoutes.search && this.routeRegExps.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    } else if (params.has('search')) {\n                        this.searchQuery = params.get('search');\n                    }\n                }\n\n                this.location.search({});\n            };\n\n            MainController.prototype.buildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n\n                this.location.path(path);\n            };\n\n            MainController.prototype.pagination = function () {\n                var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n                var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n                var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n                // Reset the array\n                this.pages = new Array();\n\n                for (var i = startPage; i <= endPage; i++) {\n                    this.pages.push(i);\n                }\n            };\n\n            MainController.prototype.googleDataLayerUpdate = function () {\n                if (typeof dataLayer !== 'undefined') {\n                    dataLayer.push({\n                        'event': 'degreeSearchFilterChange',\n                        'degreeSearchTerm': this.searchQuery,\n                        'degreeSearchProgramTypes': this.selectedProgramType,\n                        'degreeSearchCollege': this.selectedCollege\n                    });\n                }\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n\nvar DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var ProgramController = (function () {\n            function ProgramController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.programTypes = new Array();\n            }\n            ProgramController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.program_types) {\n                    this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n                }\n\n                this.registerRoutes();\n            };\n\n            ProgramController.prototype.registerRoutes = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n\n                    if (type.children.length > 0) {\n                        type.children.forEach(function (child) {\n                            programSlugs.push(child.slug);\n                        });\n                    }\n                });\n\n                this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n            };\n\n            ProgramController.prototype.onClear = function () {\n                this.mainCtl.selectedProgramType = 'all';\n                this.mainCtl.selectedProgramTypeDisplay = '';\n                this.mainCtl.selectedParentProgramType = '';\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            ProgramController.prototype.onSelected = function (value) {\n                var selected = this.programTypes.find(function (x) {\n                    return x.slug === value;\n                });\n                var parent = null;\n\n                if (!selected) {\n                    this.programTypes.forEach(function (type) {\n                        var match = type.children.find(function (c) {\n                            return c.slug === value;\n                        });\n\n                        if (match) {\n                            selected = match;\n                            parent = type;\n                        }\n                    });\n                } else {\n                    parent = selected;\n                }\n\n                this.mainCtl.selectedProgramType = selected.slug;\n                this.mainCtl.selectedProgramTypeDisplay = selected.name;\n                this.mainCtl.selectedParentProgramType = parent.slug;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n            ProgramController.$inject = ['$scope', 'DegreeService'];\n            return ProgramController;\n        })();\n        Controllers.ProgramController = ProgramController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n\nvar DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var CollegeController = (function () {\n            function CollegeController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.colleges = new Array();\n            }\n            CollegeController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.colleges) {\n                    this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n                }\n\n                this.registerRoutes();\n            };\n\n            CollegeController.prototype.registerRoutes = function () {\n                this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n            };\n\n            CollegeController.prototype.onClear = function () {\n                this.mainCtl.selectedCollege = 'all';\n                this.mainCtl.selectedCollegeDisplay = '';\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            CollegeController.prototype.onSelected = function (value) {\n                var selected = this.colleges.find(function (x) {\n                    return x.slug == value;\n                });\n                this.mainCtl.selectedCollege = selected.slug;\n                this.mainCtl.selectedCollegeDisplay = selected.fullname;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n            CollegeController.$inject = ['$scope', 'DegreeService'];\n            return CollegeController;\n        })();\n        Controllers.CollegeController = CollegeController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n\nvar DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function searchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: function (scope, atts) {\n                    var retval = UCF_DEGREE_SEARCH_ANGULAR.search_form_template;\n                    if (atts.placeholder) {\n                        retval = retval.replace('{{atts.placeholder}}', atts.placeholder);\n                    }\n                    return retval;\n                }\n            };\n        }\n        Directives.searchFormDirective = searchFormDirective;\n\n        function searchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.searchResultsDirective = searchResultsDirective;\n\n        function programTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.programTypesDirective = programTypesDirective;\n\n        function collegesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n            };\n        }\n        Directives.collegesDirective = collegesDirective;\n\n        function paginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.paginationDirective = paginationDirective;\n\n        function resultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.resultCountDirective = resultCountDirective;\n\n        function loadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.loadingDirective = loadingDirective;\n\n        function noResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.noResultsDirective = noResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n\nvar DegreeSearch;\n(function (DegreeSearch) {\n    (function (Filters) {\n        function convertEncoding() {\n            return function (input) {\n                return $('<span>').html(input).text();\n            };\n        }\n        Filters.convertEncoding = convertEncoding;\n    })(DegreeSearch.Filters || (DegreeSearch.Filters = {}));\n    var Filters = DegreeSearch.Filters;\n})(DegreeSearch || (DegreeSearch = {}));\n\nvar app = angular.module('DegreeSearchApp', []).config([\n    '$locationProvider', function ($locationProvider) {\n        $locationProvider.html5Mode(true);\n    }]);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n\nangular.module('DegreeSearchApp').filter('convertEncoding', DegreeSearch.Filters.convertEncoding);\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var CollegeController = (function () {\n            function CollegeController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.colleges = new Array();\n            }\n            CollegeController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.colleges) {\n                    this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n                }\n\n                this.registerRoutes();\n            };\n\n            CollegeController.prototype.registerRoutes = function () {\n                this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n            };\n\n            CollegeController.prototype.onClear = function () {\n                this.mainCtl.selectedCollege = 'all';\n                this.mainCtl.selectedCollegeDisplay = '';\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            CollegeController.prototype.onSelected = function (value) {\n                var selected = this.colleges.find(function (x) {\n                    return x.slug == value;\n                });\n                this.mainCtl.selectedCollege = selected.slug;\n                this.mainCtl.selectedCollegeDisplay = selected.fullname;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n            CollegeController.$inject = ['$scope', 'DegreeService'];\n            return CollegeController;\n        })();\n        Controllers.CollegeController = CollegeController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function searchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: function (scope, atts) {\n                    var retval = UCF_DEGREE_SEARCH_ANGULAR.search_form_template;\n                    if (atts.placeholder) {\n                        retval = retval.replace('{{atts.placeholder}}', atts.placeholder);\n                    }\n                    return retval;\n                }\n            };\n        }\n        Directives.searchFormDirective = searchFormDirective;\n\n        function searchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.searchResultsDirective = searchResultsDirective;\n\n        function programTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.programTypesDirective = programTypesDirective;\n\n        function collegesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n            };\n        }\n        Directives.collegesDirective = collegesDirective;\n\n        function paginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.paginationDirective = paginationDirective;\n\n        function resultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.resultCountDirective = resultCountDirective;\n\n        function loadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.loadingDirective = loadingDirective;\n\n        function noResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.noResultsDirective = noResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Filters) {\n        function convertEncoding() {\n            return function (input) {\n                return $('<span>').html(input).text();\n            };\n        }\n        Filters.convertEncoding = convertEncoding;\n    })(DegreeSearch.Filters || (DegreeSearch.Filters = {}));\n    var Filters = DegreeSearch.Filters;\n})(DegreeSearch || (DegreeSearch = {}));\n","var app = angular.module('DegreeSearchApp', []).config([\n    '$locationProvider', function ($locationProvider) {\n        $locationProvider.html5Mode(true);\n    }]);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n\nangular.module('DegreeSearchApp').filter('convertEncoding', DegreeSearch.Filters.convertEncoding);\n"]}