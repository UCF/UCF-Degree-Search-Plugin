{"version":3,"sources":["controllers/maincontroller.ts","controllers/programcontroller.ts","handlebar-helpers.ts","services/degreeservice.ts","controllers/collegecontroller.ts","directives/degreedirectives.ts","filters/encodingfilter.ts","app.ts"],"names":["input","replace","split","s","i","splitInput","length","exceptions","indexOf","charAt","toUpperCase","substr","toLowerCase","retval","join","self","nativeURLSearchParams","URLSearchParams","get","e","a","toString","decodesPlusesCorrectly","__URLSearchParams__","encodesAmpersandsCorrectly","ampersandTest","append","prototype","URLSearchParamsPolyfill","iterable","Symbol","iterator","search","parseToDict","encode","str","match","decodeURIComponent","arr","value","shift","done","undefined","isArray","item","TypeError","appendTo","dict","key","hasOwnProperty","slice","j","index","decode","name","JSON","stringify","push","val","Object","call","obj","prop","isSupportObjectConstructor","this","has","query","Proxy","target","args","Function","bind","USPProto","forEach","callback","thisArg","sort","k","keys","values","items","entries","makeIterator","global","window","Handlebars","registerHelper","stripDegree","capitalize","Services","DegreeService","$http","$location","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","DegreeSearch","getDegreeResults","successCallback","errorCallback","params","colleges","college","programType","page","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","program_types","$inject","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","hasFilters","updateHeading","update_heading","updateTitle","update_title","setTimeout","init","registerRoute","setDefaults","parsePath","$heading","$","$watch","newValue","oldValue","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","buildResultMessage","pagination","googleDataLayerUpdate","setHeading","setTitle","resultMessage","setWpSpeak","selectedProgramTypeDisplay","selectedCollegeDisplay","message","wp","a11y","speak","html","headingFn","titleTemplate","title_template","titleFn","compile","document","title","newVal","oldVal","previousPage","nextPage"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["module DegreeSearch.Controllers {\n    import Services = DegreeSearch.Services;\n\n    export class MainController {\n        static $inject = ['$scope', '$location', 'DegreeService'];\n\n        scope: ng.IScope;\n        location: ng.ILocationService;\n        degreeService: Services.IDegreeService;\n        results: any;\n        updateHeading: boolean;\n        updateTitle: boolean;\n\n        selectedParentProgramType: string;\n        selectedProgramType: string;\n        selectedProgramTypeDisplay: string;\n        selectedCollege: string;\n        selectedCollegeDisplay: string;\n\n        routeRegExps: {\n            college?: RegExp;\n            program?: RegExp;\n            search?: RegExp;\n        };\n\n        enabledRoutes: {\n            college: boolean;\n            program: boolean;\n            search: boolean;\n        }\n\n        searchQuery: string;\n        programTypes: Array<any>;\n        totalResults: number;\n        currentPage: number;\n        pages: Array<number>;\n        totalPages: number;\n        startIndex: number;\n        endIndex: number;\n        resultMessage: string;\n\n        // Helper parameter for handlebars\n        hasFilters: boolean;\n\n        $heading: any;\n\n        constructor($scope: ng.IScope, $location: ng.ILocationService, degreeService: Services.IDegreeService) {\n            this.scope = $scope;\n            this.location = $location;\n            this.degreeService = degreeService;\n            this.pages = new Array<number>();\n            this.routeRegExps = {\n                college: null,\n                program: null,\n                search: null\n            };\n            this.hasFilters = false;\n\n            this.updateHeading = UCF_DEGREE_SEARCH_ANGULAR.update_heading;\n            this.updateTitle = UCF_DEGREE_SEARCH_ANGULAR.update_title;\n\n            setTimeout( () => { this.init() }, 0);\n        }\n\n        init() {\n            this.registerRoute();\n            this.setDefaults();\n            this.parsePath();\n\n            if (this.updateHeading) {\n                this.$heading = $('h1');\n            }\n            this.scope.$watch('mainCtl.searchQuery', (newValue, oldValue) => { this.handleInput( newValue, oldValue ) });\n            this.getSearchResults();\n        }\n\n        getSearchResults() {\n            this.totalResults = null;\n\n            var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n            var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n            if (this.searchQuery || this.selectedProgramType || this.selectedCollege) {\n                this.hasFilters = true;\n            } else {\n                this.hasFilters = false;\n            }\n\n            this.degreeService.getDegreeResults(\n                this.searchQuery,\n                {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                },\n                (response) => {\n                    this.successHandler(response);\n                },\n                (response) => {\n                    this.errorHandler(response);\n                }\n            );\n        }\n\n        successHandler(response) {\n            this.results = response.data;\n            this.totalResults = this.results.totalPosts;\n            this.currentPage = this.results.currentPage;\n            this.totalPages = this.results.totalPages;\n            this.startIndex = this.results.startIndex;\n            this.endIndex = this.results.endIndex;\n            this.buildLocation();\n            this.buildResultMessage();\n            this.pagination();\n            this.googleDataLayerUpdate();\n\n            if (this.updateHeading) {\n                this.setHeading();\n            }\n\n            if (this.updateTitle) {\n                this.setTitle();\n            }\n        }\n\n        errorHandler(response) {\n            this.results = {};\n        }\n\n        buildResultMessage() {\n            if (this.totalResults === 0) {\n                this.resultMessage = '';\n                this.setWpSpeak(\"No results found for \" + this.searchQuery);\n            } else {\n                this.resultMessage = \"Showing \" + this.startIndex + \" through \" + this.endIndex + \" of \" + this.totalResults + \" results\";\n\n                if (this.searchQuery && this.searchQuery !== '') {\n                    this.resultMessage += \" for \" + this.searchQuery;\n                }\n\n                if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                    this.resultMessage += \" in \" + this.selectedProgramTypeDisplay;\n                }\n\n                if (this.selectedCollege && this.selectedCollege !== 'all') {\n                    this.resultMessage += \" at the \" + this.selectedCollegeDisplay;\n                }\n\n                this.resultMessage += \" at UCF.\";\n\n                this.setWpSpeak(this.resultMessage);\n            }\n        }\n\n        setWpSpeak(message) {\n            wp.a11y.speak(message);\n        }\n\n        setHeading() {\n            var headingTemplate = UCF_DEGREE_SEARCH_ANGULAR.heading_template,\n                headingFn = Handlebars.compile(headingTemplate);\n\n            this.$heading.html(headingFn(this));\n        }\n\n        setTitle() {\n            var titleTemplate = UCF_DEGREE_SEARCH_ANGULAR.title_template,\n                titleFn = Handlebars.compile(titleTemplate);\n\n            document.title = titleFn(this);\n        }\n\n        handleInput(newVal, oldVal) {\n            if  ( newVal === oldVal ) {\n                return;\n            }\n\n            this.searchQuery = newVal;\n            this.currentPage = 1;\n            this.buildLocation();\n            this.getSearchResults();\n        }\n\n        previousPage() {\n            this.currentPage--;\n\n            if ( this.currentPage < 1 ) {\n                this.currentPage = 1;\n            } else {\n                this.getSearchResults();\n            }\n        }\n\n        nextPage() {\n            this.currentPage++;\n\n            if ( this.currentPage <= this.totalPages ) {\n                this.getSearchResults();\n            } else {\n                this.currentPage--;\n            }\n        }\n\n        goToPage(page: number) {\n            if ( page >= 1 && page <= this.totalPages ) {\n                this.currentPage = page;\n                this.getSearchResults();\n            }\n        }\n\n        registerRoute() {\n            this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n        }\n\n        setDefaults() {\n            if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n            }\n\n            if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n            }\n\n            if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                // Set defaults.\n                this.enabledRoutes = {\n                    college: false,\n                    program: false,\n                    search: false\n                };\n\n                UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(route => {\n                    this.enabledRoutes[route] = true;\n                });\n\n            } else {\n                this.enabledRoutes = {\n                    college: true,\n                    program: true,\n                    search: true\n                };\n            }\n        }\n\n        parsePath() {\n            // Parse query params\n            var params = new URLSearchParams(location.search);\n\n            var path = this.location.path();\n\n            if (this.enabledRoutes.college && this.routeRegExps.college) {\n                var matches = this.routeRegExps.college.exec(path);\n                if ( matches ) {\n                    this.selectedCollege = matches[1];\n                } else if (params.has('college[0]')) {\n                    this.selectedCollege = params.get('college[0]');\n                } else if (params.has('colleges')) {\n                    this.selectedCollege = params.get('colleges');\n                }\n\n                if (this.selectedCollege ) {\n                    var college = UCF_DEGREE_SEARCH_ANGULAR.colleges.find(x=>x.slug == this.selectedCollege);\n                    if (college) {\n                        this.selectedCollegeDisplay = college.fullname;\n                    }\n                }\n            }\n\n            if (this.enabledRoutes.program && this.routeRegExps.program) {\n\n                var matches = this.routeRegExps.program.exec(path);\n                if (matches) {\n                    this.selectedProgramType = matches[1];\n                } else if (params.has('program-type[0]')) {\n                    this.selectedProgramType = params.get('program-type[0]');\n                } else if (params.has('program_types')) {\n                    this.selectedProgramType = params.get('program_types');\n                }\n\n                if (this.selectedProgramType) {\n                    var selected = UCF_DEGREE_SEARCH_ANGULAR.program_types.find(x=>x.slug === this.selectedProgramType);\n                    var parent = null;\n\n                    if (!selected) {\n                        UCF_DEGREE_SEARCH_ANGULAR.program_types.forEach( (type) => {\n                            var match = type.children.find(c => c.slug === this.selectedProgramType);\n\n                            if (match) {\n                                selected = match;\n                                parent = type;\n                            }\n                        });\n                    } else {\n                        parent = selected;\n                    }\n\n                    this.selectedParentProgramType = parent.slug;\n                    this.selectedProgramTypeDisplay = selected.name;\n                }\n\n                this.location.search({});\n            }\n\n            if (this.enabledRoutes.search && this.routeRegExps.search) {\n                var matches = this.routeRegExps.search.exec(path);\n                if (matches) {\n                    this.searchQuery = matches[1];\n                }\n                else if (params.has('search')) {\n                    this.searchQuery = params.get('search');\n                }\n            }\n\n            this.location.search({});\n        }\n\n        buildLocation() {\n            var path = '/';\n\n            if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                path += 'college/' + this.selectedCollege + '/';\n            }\n\n            if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                path += this.selectedProgramType + '/';\n            }\n\n            if (this.searchQuery && this.enabledRoutes.search) {\n                path += 'search/' + this.searchQuery + '/';\n            }\n\n            this.location.path(path);\n        }\n\n        pagination() {\n            var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n            var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n            var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n            // Reset the array\n            this.pages = new Array<number>();\n\n            for(var i = startPage; i <= endPage; i++) {\n                this.pages.push(i);\n            }\n        }\n\n        googleDataLayerUpdate() {\n            if (typeof dataLayer !== 'undefined') {\n                dataLayer.push({\n                    'event': 'degreeSearchFilterChange',\n                    'degreeSearchTerm': this.searchQuery,\n                    'degreeSearchProgramTypes': this.selectedProgramType,\n                    'degreeSearchCollege': this.selectedCollege\n                });\n            }\n        }\n    }\n}\n","module DegreeSearch.Controllers {\n    import Services = DegreeSearch.Services;\n\n    export class ProgramController {\n        static $inject = ['$scope', 'DegreeService'];\n\n        scope: ng.IScope;\n        degreeService: Services.IDegreeService;\n        mainCtl: ng.IRootScopeService;\n        programTypes: Array<any>;\n\n        constructor($scope: ng.IScope, degreeService: Services.IDegreeService) {\n            this.scope = $scope;\n            this.degreeService = degreeService;\n            this.mainCtl = this.scope.$parent.mainCtl;\n            this.programTypes = new Array();\n        }\n\n        init() {\n            if ( UCF_DEGREE_SEARCH_ANGULAR.program_types ) {\n                this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n            }\n\n            this.registerRoutes();\n        }\n\n        registerRoutes() {\n            var programSlugs = new Array<string>();\n\n            this.programTypes.forEach( (type) => {\n                programSlugs.push(type.slug);\n\n                if (type.children.length > 0) {\n                    type.children.forEach( (child) => {\n                        programSlugs.push(child.slug);\n                    });\n                }\n            });\n\n            this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n        }\n\n        onClear() {\n            this.mainCtl.selectedProgramType = 'all';\n            this.mainCtl.selectedProgramTypeDisplay = '';\n            this.mainCtl.selectedParentProgramType = '';\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n\n        onSelected(value) {\n            var selected = this.programTypes.find(x=>x.slug === value);\n            var parent = null;\n\n            if (!selected) {\n                this.programTypes.forEach( (type) => {\n                    var match = type.children.find(c => c.slug === value );\n\n                    if (match) {\n                        selected = match;\n                        parent = type;\n                    }\n                });\n            } else {\n                parent = selected;\n            }\n\n            this.mainCtl.selectedProgramType = selected.slug;\n            this.mainCtl.selectedProgramTypeDisplay = selected.name;\n            this.mainCtl.selectedParentProgramType = parent.slug;\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n    }\n}\n","declare var Handlebars;\n\nfunction stripDegree(input: string): string {\n  return input.replace(' Degree', '').replace(' Degrees', '').replace('Program', '').replace('Programs', '');\n}\n\nfunction capitalize(input: string): string {\n  const splitInput = input.split(' ');\n  const retval = [];\n  const exceptions = [\n    'a', 'an', 'the', 'at', 'by', 'for', 'in', 'of',\n    'on', 'to', 'up', 'and', 'as', 'but', 'or', 'nor'\n  ];\n\n  splitInput.forEach((s, i) => {\n    // Capitalize first and last always\n    if (i === 0 || i === splitInput.length - 1) {\n      retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n    } else if (exceptions.indexOf(s) === -1) {\n      // If it's not an exception, capitalize it\n      retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n    } else {\n      retval[i] = s;\n    }\n  });\n\n  return retval.join(' ');\n}\n\nif (typeof Handlebars !== 'undefined') {\n  Handlebars.registerHelper('stripDegree', stripDegree);\n  Handlebars.registerHelper('capitalize', capitalize);\n}\n","module DegreeSearch.Services {\n    export interface ISearchArgs {\n        programType?: string;\n        college?: string;\n        page?: number;\n        limit?: number;\n    }\n\n    export interface IDegreeService {\n        getDegreeResults(search: string, args: ISearchArgs, successCallback: Function, errorCallback: Function);\n        getProgramTypes(successCallback: Function, errorCallback: Function);\n        getProgramTypesCounts(search: string, college: string, successCallback: Function, errorCallback: Function);\n        getColleges(successCallback: Function, errorCallback: Function);\n        getCollegesCounts(search: string, programType: string, successCallback: Function, errorCallback: Function);\n    }\n\n    export class DegreeService {\n        static $inject = ['$http', '$location'];\n\n        http: ng.IHttpService;\n        location: ng.ILocationService;\n        previousQuery: string;\n        apiUrl: string;\n        limit: number;\n\n        constructor($http: ng.IHttpService, $location: ng.ILocationService) {\n            this.http = $http;\n            this.location = $location;\n            this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n            this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n        }\n\n        public getDegreeResults(query: string, args: ISearchArgs, successCallback: Function, errorCallback: Function) {\n            var params = {\n                search: query,\n                colleges: args.college,\n                program_types: args.programType,\n                page: args.page ? args.page : 1,\n                limit: args.limit ? args.limit : this.limit\n            };\n\n            this.http.get(this.apiUrl + '/degrees', { params: params })\n                .then( (response) => { // Success callback\n                    successCallback(response);\n                }, (response) => { // Error callback\n                    errorCallback(response);\n                });\n        }\n\n        public getProgramTypes(successCallback: Function, errorCallback: Function) {\n            this.http.get(this.apiUrl + '/program-types')\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                });\n        }\n\n        public getProgramTypesCounts(query: string, college:string, successCallback: Function, errorCallback: Function) {\n            var params = {\n                search: query,\n                colleges: college\n            };\n\n            params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n            this.http.get(this.apiUrl + '/program-types/counts', {params: params})\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                });\n        }\n\n        public getColleges(successCallback: Function, errorCallback: Function) {\n            this.http.get(this.apiUrl + '/colleges')\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                })\n        }\n\n        public getCollegesCounts(query: string, programType: string, successCallback: Function, errorCallback: Function) {\n            var params = {\n                search: query,\n                program_types: programType\n            };\n\n            params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n            this.http.get(this.apiUrl + '/colleges/counts', {params: params})\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                });\n        }\n    }\n}\n","module DegreeSearch.Controllers {\n    import Services = DegreeSearch.Services;\n\n    export class CollegeController {\n        static $inject = ['$scope', 'DegreeService'];\n\n        scope: ng.IScope;\n        degreeService: Services.IDegreeService;\n        mainCtl: ng.IRootScopeService;\n        colleges: Array<any>;\n\n        constructor($scope: ng.IScope, degreeService: Services.IDegreeService) {\n            this.scope = $scope;\n            this.degreeService = degreeService;\n            this.mainCtl = this.scope.$parent.mainCtl;\n            this.colleges = new Array();\n        }\n\n        init() {\n            if ( UCF_DEGREE_SEARCH_ANGULAR.colleges ) {\n                this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n            }\n\n            this.registerRoutes();\n        }\n\n        registerRoutes() {\n            this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n        }\n\n        onClear() {\n            this.mainCtl.selectedCollege = 'all';\n            this.mainCtl.selectedCollegeDisplay = '';\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n\n        onSelected(value) {\n            var selected = this.colleges.find(x => x.slug == value);\n            this.mainCtl.selectedCollege = selected.slug;\n            this.mainCtl.selectedCollegeDisplay = selected.fullname;\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n    }\n}\n","module DegreeSearch.Directives {\n    export function searchFormDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: function (scope, atts) {\n          let retval = UCF_DEGREE_SEARCH_ANGULAR.search_form_template;\n          if (atts.placeholder) {\n            retval = retval.replace('{{atts.placeholder}}', atts.placeholder);\n          }\n          return retval;\n        }\n      };\n    }\n\n    export function searchResultsDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n      };\n    }\n\n    export function programTypesDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n      };\n    }\n\n    export function collegesDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n      };\n    }\n\n    export function paginationDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n      };\n    }\n\n    export function resultCountDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n      };\n    }\n\n    export function loadingDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n      };\n    }\n\n    export function noResultsDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n      };\n    }\n}\n","module DegreeSearch.Filters {\n    export function convertEncoding() {\n        return function(input) {\n            return $('<span>').html(input).text();\n        }\n    }\n}\n","declare var UCF_DEGREE_SEARCH_ANGULAR: any;\ndeclare var angular;\ndeclare var angular.ng;\ndeclare var wp;\n\nconst app = angular.module('DegreeSearchApp', []).config(['$locationProvider', ($locationProvider: ng.ILocationProvider) => {\n  $locationProvider.html5Mode(true);\n}]);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n\nangular.module('DegreeSearchApp').filter('convertEncoding', DegreeSearch.Filters.convertEncoding);\n"]}