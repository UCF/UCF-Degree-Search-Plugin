{"version":3,"sources":["degreeservice.js","maincontroller.js","programcontroller.js","collegecontroller.js","degreedirectives.js","encodingfilter.js","app.js"],"names":["DegreeSearch","Services","DegreeService","$http","$location","this","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","prototype","getDegreeResults","query","args","successCallback","errorCallback","params","search","colleges","college","program_types","programType","page","get","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","$inject","Controllers","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","updateHeading","update_heading","updateTitle","update_title","setTimeout","init","registerRoute","setDefaults","parsePath","$heading","$","$watch","newValue","oldValue","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","buildResultMessage","pagination","setHeading","setTitle","resultMessage","setWpSpeak","selectedProgramTypeDisplay","selectedCollegeDisplay","message","wp","a11y","speak","headingString","text","title","prefix","suffix","push","replace","prefixString","join","suffixString","length","document","newVal","oldVal","previousPage","nextPage","goToPage","RegExp","default_program_type","default_college","enabled_routes","enabledRoutes","forEach","route","path","matches","exec","find","x","slug","fullname","plural","pagePad","innerWidth","startPage","endPage","i","ProgramController","mainCtl","$parent","programTypes","addHandlers","registerRoutes","onQueryChange","programSlugs","type","onSelected","value","selected","updateCounts","count","counts","all","CollegeController","Directives","searchFormDirective","restrict","template","atts","retval","search_form_template","placeholder","searchResultsDirective","search_results_template","programTypesDirective","program_types_template","collegesDirective","colleges_template","paginationDirective","pagination_template","resultCountDirective","result_count_template","loadingDirective","loading_template","noResultsDirective","no_results_template","Filters","convertEncoding","input","html","angular","module","controller","service","directive","filter"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n                this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n            }\n            DegreeService.prototype.getDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: args.college,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1,\n                    limit: args.limit ? args.limit : this.limit\n                };\n\n                this.http.get(this.apiUrl + '/degrees', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypesCounts = function (query, college, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: college\n                };\n\n                params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n                this.http.get(this.apiUrl + '/program-types/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getColleges = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/colleges').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getCollegesCounts = function (query, programType, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    program_types: programType\n                };\n\n                params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n                this.http.get(this.apiUrl + '/colleges/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n                this.pages = new Array();\n                this.routeRegExps = {\n                    college: null,\n                    program: null,\n                    search: null\n                };\n\n                this.updateHeading = UCF_DEGREE_SEARCH_ANGULAR.update_heading;\n                this.updateTitle = UCF_DEGREE_SEARCH_ANGULAR.update_title;\n\n                setTimeout(function () {\n                    _this.init();\n                }, 0);\n            }\n            MainController.prototype.init = function () {\n                var _this = this;\n                this.registerRoute();\n                this.setDefaults();\n                this.parsePath();\n\n                if (this.updateHeading) {\n                    this.$heading = $('h1');\n                }\n                this.scope.$watch('mainCtl.searchQuery', function (newValue, oldValue) {\n                    _this.handleInput(newValue, oldValue);\n                });\n                this.getSearchResults();\n            };\n\n            MainController.prototype.getSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n                var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n                this.degreeService.getDegreeResults(this.searchQuery, {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                }, function (response) {\n                    _this.successHandler(response);\n                }, function (response) {\n                    _this.errorHandler(response);\n                });\n            };\n\n            MainController.prototype.successHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n                this.buildLocation();\n                this.buildResultMessage();\n                this.pagination();\n\n                if (this.updateHeading) {\n                    this.setHeading();\n                }\n\n                if (this.updateTitle) {\n                    this.setTitle();\n                }\n            };\n\n            MainController.prototype.errorHandler = function (response) {\n                this.results = {};\n            };\n\n            MainController.prototype.buildResultMessage = function () {\n                if (this.totalResults === 0) {\n                    this.resultMessage = '';\n                    this.setWpSpeak(\"No results found for \" + this.searchQuery);\n                } else {\n                    this.resultMessage = \"Showing \" + this.startIndex + \" through \" + this.endIndex + \" of \" + this.totalResults + \" results\";\n\n                    if (this.searchQuery && this.searchQuery !== '') {\n                        this.resultMessage += \" for \" + this.searchQuery;\n                    }\n\n                    if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                        this.resultMessage += \" in \" + this.selectedProgramTypeDisplay;\n                    }\n\n                    if (this.selectedCollege && this.selectedCollege !== 'all') {\n                        this.resultMessage += \" at the \" + this.selectedCollegeDisplay;\n                    }\n\n                    this.resultMessage += \" at UCF.\";\n\n                    this.setWpSpeak(this.resultMessage);\n                }\n            };\n\n            MainController.prototype.setWpSpeak = function (message) {\n                wp.a11y.speak(message);\n            };\n\n            MainController.prototype.setHeading = function () {\n                var headingString = 'Degree Search';\n\n                if (this.searchQuery) {\n                    headingString += ' - ' + this.searchQuery + ' Programs at UCF';\n                }\n\n                this.$heading.text(headingString);\n            };\n\n            MainController.prototype.setTitle = function () {\n                var title = 'Degree Search', prefix = [], suffix = [];\n\n                if (this.searchQuery && this.searchQuery !== '') {\n                    prefix.push(this.searchQuery);\n                }\n\n                if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                    suffix.push(this.selectedProgramTypeDisplay.replace(' Degrees', ''));\n                }\n\n                if (this.selectedCollege && this.selectedCollege !== 'all') {\n                    suffix.push(this.selectedCollegeDisplay);\n                }\n\n                var prefixString = prefix.join(' ') + ' ' + title;\n                var suffixString = suffix.join(', ') + ' Degrees';\n\n                if (suffixString.length === 0) {\n                    suffixString = 'University of Central Florida Academic Programs';\n                }\n\n                document.title = prefixString + ' | ' + suffixString;\n            };\n\n            MainController.prototype.handleInput = function (newVal, oldVal) {\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.searchQuery = newVal;\n                this.currentPage = 1;\n                this.buildLocation();\n                this.getSearchResults();\n            };\n\n            MainController.prototype.previousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.nextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.getSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.goToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.registerRoute = function () {\n                this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n            };\n\n            MainController.prototype.setDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.parsePath = function () {\n                var _this = this;\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college && this.routeRegExps.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                        var college = UCF_DEGREE_SEARCH_ANGULAR.colleges.find(function (x) {\n                            return x.slug == _this.selectedCollege;\n                        });\n                        this.selectedCollegeDisplay = college.fullname;\n                    }\n                }\n\n                if (this.enabledRoutes.program && this.routeRegExps.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                        var programType = UCF_DEGREE_SEARCH_ANGULAR.program_types.find(function (x) {\n                            return x.slug == _this.selectedProgramType;\n                        });\n                        this.selectedProgramTypeDisplay = programType.plural;\n                    }\n                }\n\n                if (this.enabledRoutes.search && this.routeRegExps.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    }\n                }\n            };\n\n            MainController.prototype.buildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n\n                this.location.path(path);\n            };\n\n            MainController.prototype.pagination = function () {\n                var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n                var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n                var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n                // Reset the array\n                this.pages = new Array();\n\n                for (var i = startPage; i <= endPage; i++) {\n                    this.pages.push(i);\n                }\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var ProgramController = (function () {\n            function ProgramController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.programTypes = new Array();\n\n                this.addHandlers();\n            }\n            ProgramController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.program_types) {\n                    this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n                }\n\n                this.registerRoutes();\n            };\n\n            ProgramController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n                this.scope.$watch('mainCtl.selectedCollege', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n            };\n\n            ProgramController.prototype.registerRoutes = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n                });\n\n                this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n            };\n\n            ProgramController.prototype.onSelected = function (value) {\n                var selected = this.programTypes.find(function (x) {\n                    return x.slug === value;\n                });\n                this.mainCtl.selectedProgramType = selected.slug;\n                this.mainCtl.selectedProgramTypeDisplay = selected.plural;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            ProgramController.prototype.onQueryChange = function (newVal, oldVal) {\n                var _this = this;\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.degreeService.getProgramTypesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedCollege, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    // Error occurred. Remove count.\n                    _this.programTypes.forEach(function (type) {\n                        type.count = null;\n                    });\n                });\n            };\n\n            ProgramController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                if (counts.all === 0) {\n                    return;\n                }\n\n                this.programTypes.forEach(function (type) {\n                    if (typeof counts[type.slug] !== 'undefined') {\n                        type.count = counts[type.slug];\n                    } else {\n                        type.count = 0;\n                    }\n                });\n            };\n            ProgramController.$inject = ['$scope', 'DegreeService'];\n            return ProgramController;\n        })();\n        Controllers.ProgramController = ProgramController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var CollegeController = (function () {\n            function CollegeController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.colleges = new Array();\n\n                this.addHandlers();\n            }\n            CollegeController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.colleges) {\n                    this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n                }\n\n                this.registerRoutes();\n            };\n\n            CollegeController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n                this.scope.$watch('mainCtl.selectedProgramType', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n            };\n\n            CollegeController.prototype.registerRoutes = function () {\n                this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n            };\n\n            CollegeController.prototype.onSelected = function (value) {\n                var selected = this.colleges.find(function (x) {\n                    return x.slug == value;\n                });\n                this.mainCtl.selectedCollege = selected.slug;\n                this.mainCtl.selectedCollegeDisplay = selected.fullname;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            CollegeController.prototype.onQueryChange = function (newVal, oldVal) {\n                var _this = this;\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.degreeService.getCollegesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedProgramType, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    _this.colleges.forEach(function (college) {\n                        college.count = null;\n                    });\n                });\n            };\n\n            CollegeController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                if (counts.all === 0) {\n                    return;\n                }\n\n                this.colleges.forEach(function (college) {\n                    if (typeof counts[college.slug] !== 'undefined') {\n                        college.count = counts[college.slug];\n                    } else {\n                        college.count = 0;\n                    }\n                });\n            };\n            CollegeController.$inject = ['$scope', 'DegreeService'];\n            return CollegeController;\n        })();\n        Controllers.CollegeController = CollegeController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function searchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: function (scope, atts) {\n                    var retval = UCF_DEGREE_SEARCH_ANGULAR.search_form_template;\n                    if (atts.placeholder) {\n                        retval = retval.replace('{{atts.placeholder}}', atts.placeholder);\n                    }\n                    return retval;\n                }\n            };\n        }\n        Directives.searchFormDirective = searchFormDirective;\n\n        function searchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.searchResultsDirective = searchResultsDirective;\n\n        function programTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.programTypesDirective = programTypesDirective;\n\n        function collegesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n            };\n        }\n        Directives.collegesDirective = collegesDirective;\n\n        function paginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.paginationDirective = paginationDirective;\n\n        function resultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.resultCountDirective = resultCountDirective;\n\n        function loadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.loadingDirective = loadingDirective;\n\n        function noResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.noResultsDirective = noResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Filters) {\n        function convertEncoding() {\n            return function (input) {\n                return $('<span>').html(input).text();\n            };\n        }\n        Filters.convertEncoding = convertEncoding;\n    })(DegreeSearch.Filters || (DegreeSearch.Filters = {}));\n    var Filters = DegreeSearch.Filters;\n})(DegreeSearch || (DegreeSearch = {}));\n","angular.module('DegreeSearchApp', []);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n\nangular.module('DegreeSearchApp').filter('convertEncoding', DegreeSearch.Filters.convertEncoding);\n"]}