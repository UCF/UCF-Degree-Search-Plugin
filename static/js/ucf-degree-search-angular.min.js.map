{"version":3,"sources":["controllers/maincontroller.ts","controllers/programcontroller.ts","handlebar-helpers.ts","services/degreeservice.ts","controllers/collegecontroller.ts","directives/degreedirectives.ts","filters/encodingfilter.ts","app.ts"],"names":["input","replace","split","forEach","s","i","splitInput","length","exceptions","indexOf","retval","charAt","toUpperCase","substr","toLowerCase","join","self","nativeURLSearchParams","URLSearchParams","get","e","a","toString","decodesPlusesCorrectly","__URLSearchParams__","encodesAmpersandsCorrectly","ampersandTest","append","prototype","URLSearchParamsPolyfill","iterable","Symbol","iterator","search","parseToDict","str","match","makeIterator","arr","value","shift","done","undefined","isArray","item","TypeError","appendTo","dict","key","hasOwnProperty","slice","j","pairs","index","decode","name","JSON","stringify","push","val","Object","call","obj","prop","isSupportObjectConstructor","this","has","query","encode","Proxy","target","args","Function","bind","USPProto","callback","thisArg","sort","k","keys","values","items","entries","global","window","stripDegree","capitalize","DegreeService","$http","$location","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","DegreeSearch","Services","getDegreeResults","successCallback","errorCallback","colleges","college","program_types","programType","page","params","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","$inject","Controllers","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","updateHeading","update_heading","updateTitle","update_title","setTimeout","init","registerRoute","setDefaults","parsePath","$heading","$","$watch","newValue","oldValue","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","hasFilters","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","buildResultMessage","pagination","googleDataLayerUpdate","setHeading","setTitle","resultMessage","selectedProgramTypeDisplay","selectedCollegeDisplay","html","headingFn","titleTemplate","title_template","titleFn","Handlebars","compile","document","title","newVal","oldVal","previousPage","nextPage"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["module DegreeSearch.Controllers {\n    import Services = DegreeSearch.Services;\n\n    export class MainController {\n        static $inject = ['$scope', '$location', 'DegreeService'];\n\n        scope: ng.IScope;\n        location: ng.ILocationService;\n        degreeService: Services.IDegreeService;\n        results: any;\n        updateHeading: boolean;\n        updateTitle: boolean;\n\n        selectedParentProgramType: string;\n        selectedProgramType: string;\n        selectedProgramTypeDisplay: string;\n        selectedCollege: string;\n        selectedCollegeDisplay: string;\n\n        routeRegExps: {\n            college?: RegExp;\n            program?: RegExp;\n            search?: RegExp;\n        };\n\n        enabledRoutes: {\n            college: boolean;\n            program: boolean;\n            search: boolean;\n        }\n\n        searchQuery: string;\n        programTypes: Array<any>;\n        totalResults: number;\n        currentPage: number;\n        pages: Array<number>;\n        totalPages: number;\n        startIndex: number;\n        endIndex: number;\n        resultMessage: string;\n\n        // Helper parameter for handlebars\n        hasFilters: boolean;\n\n        $heading: any;\n\n        constructor($scope: ng.IScope, $location: ng.ILocationService, degreeService: Services.IDegreeService) {\n            this.scope = $scope;\n            this.location = $location;\n            this.degreeService = degreeService;\n            this.pages = new Array<number>();\n            this.routeRegExps = {\n                college: null,\n                program: null,\n                search: null\n            };\n            this.hasFilters = false;\n\n            this.updateHeading = UCF_DEGREE_SEARCH_ANGULAR.update_heading;\n            this.updateTitle = UCF_DEGREE_SEARCH_ANGULAR.update_title;\n\n            setTimeout( () => { this.init() }, 0);\n        }\n\n        init() {\n            this.registerRoute();\n            this.setDefaults();\n            this.parsePath();\n\n            if (this.updateHeading) {\n                this.$heading = $('h1');\n            }\n            this.scope.$watch('mainCtl.searchQuery', (newValue, oldValue) => { this.handleInput( newValue, oldValue ) });\n            this.getSearchResults();\n        }\n\n        getSearchResults() {\n            this.totalResults = null;\n\n            var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n            var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n            if (this.searchQuery || this.selectedProgramType || this.selectedCollege) {\n                this.hasFilters = true;\n            } else {\n                this.hasFilters = false;\n            }\n\n            this.degreeService.getDegreeResults(\n                this.searchQuery,\n                {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                },\n                (response) => {\n                    this.successHandler(response);\n                },\n                (response) => {\n                    this.errorHandler(response);\n                }\n            );\n        }\n\n        successHandler(response) {\n            this.results = response.data;\n            this.totalResults = this.results.totalPosts;\n            this.currentPage = this.results.currentPage;\n            this.totalPages = this.results.totalPages;\n            this.startIndex = this.results.startIndex;\n            this.endIndex = this.results.endIndex;\n            this.buildLocation();\n            this.buildResultMessage();\n            this.pagination();\n            this.googleDataLayerUpdate();\n\n            if (this.updateHeading) {\n                this.setHeading();\n            }\n\n            if (this.updateTitle) {\n                this.setTitle();\n            }\n        }\n\n        errorHandler(response) {\n            this.results = {};\n        }\n\n        buildResultMessage() {\n            if (this.totalResults === 0) {\n                this.resultMessage = '';\n            } else {\n                this.resultMessage = \"Showing \" + this.startIndex + \" through \" + this.endIndex + \" of \" + this.totalResults + \" results\";\n\n                if (this.searchQuery && this.searchQuery !== '') {\n                    this.resultMessage += \" for \" + this.searchQuery;\n                }\n\n                if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                    this.resultMessage += \" in \" + this.selectedProgramTypeDisplay;\n                }\n\n                if (this.selectedCollege && this.selectedCollege !== 'all') {\n                    this.resultMessage += \" at the \" + this.selectedCollegeDisplay;\n                }\n\n                this.resultMessage += \" at UCF.\";\n            }\n        }\n\n        setHeading() {\n            var headingTemplate = UCF_DEGREE_SEARCH_ANGULAR.heading_template,\n                headingFn = Handlebars.compile(headingTemplate);\n\n            this.$heading.html(headingFn(this));\n        }\n\n        setTitle() {\n            var titleTemplate = UCF_DEGREE_SEARCH_ANGULAR.title_template,\n                titleFn = Handlebars.compile(titleTemplate);\n\n            document.title = titleFn(this);\n        }\n\n        handleInput(newVal, oldVal) {\n            if  ( newVal === oldVal ) {\n                return;\n            }\n\n            this.searchQuery = newVal;\n            this.currentPage = 1;\n            this.buildLocation();\n            this.getSearchResults();\n        }\n\n        previousPage() {\n            this.currentPage--;\n\n            if ( this.currentPage < 1 ) {\n                this.currentPage = 1;\n            } else {\n                this.getSearchResults();\n            }\n        }\n\n        nextPage() {\n            this.currentPage++;\n\n            if ( this.currentPage <= this.totalPages ) {\n                this.getSearchResults();\n            } else {\n                this.currentPage--;\n            }\n        }\n\n        goToPage(page: number) {\n            if ( page >= 1 && page <= this.totalPages ) {\n                this.currentPage = page;\n                this.getSearchResults();\n            }\n        }\n\n        registerRoute() {\n            this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n        }\n\n        setDefaults() {\n            if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n            }\n\n            if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n            }\n\n            if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                // Set defaults.\n                this.enabledRoutes = {\n                    college: false,\n                    program: false,\n                    search: false\n                };\n\n                UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(route => {\n                    this.enabledRoutes[route] = true;\n                });\n\n            } else {\n                this.enabledRoutes = {\n                    college: true,\n                    program: true,\n                    search: true\n                };\n            }\n        }\n\n        parsePath() {\n            // Parse query params\n            var params = new URLSearchParams(location.search);\n\n            var path = this.location.path();\n\n            if (this.enabledRoutes.college && this.routeRegExps.college) {\n                var matches = this.routeRegExps.college.exec(path);\n                if ( matches ) {\n                    this.selectedCollege = matches[1];\n                } else if (params.has('college[0]')) {\n                    this.selectedCollege = params.get('college[0]');\n                } else if (params.has('colleges')) {\n                    this.selectedCollege = params.get('colleges');\n                }\n\n                if (this.selectedCollege ) {\n                    var college = UCF_DEGREE_SEARCH_ANGULAR.colleges.find(x=>x.slug == this.selectedCollege);\n                    if (college) {\n                        this.selectedCollegeDisplay = college.fullname;\n                    }\n                }\n            }\n\n            if (this.enabledRoutes.program && this.routeRegExps.program) {\n\n                var matches = this.routeRegExps.program.exec(path);\n                if (matches) {\n                    this.selectedProgramType = matches[1];\n                } else if (params.has('program-type[0]')) {\n                    this.selectedProgramType = params.get('program-type[0]');\n                } else if (params.has('program_types')) {\n                    this.selectedProgramType = params.get('program_types');\n                }\n\n                if (this.selectedProgramType) {\n                    var selected = UCF_DEGREE_SEARCH_ANGULAR.program_types.find(x=>x.slug === this.selectedProgramType);\n                    var parent = null;\n\n                    if (!selected) {\n                        UCF_DEGREE_SEARCH_ANGULAR.program_types.forEach( (type) => {\n                            var match = type.children.find(c => c.slug === this.selectedProgramType);\n\n                            if (match) {\n                                selected = match;\n                                parent = type;\n                            }\n                        });\n                    } else {\n                        parent = selected;\n                    }\n\n                    this.selectedParentProgramType = parent.slug;\n                    this.selectedProgramTypeDisplay = selected.name;\n                }\n\n                this.location.search({});\n            }\n\n            if (this.enabledRoutes.search && this.routeRegExps.search) {\n                var matches = this.routeRegExps.search.exec(path);\n                if (matches) {\n                    this.searchQuery = matches[1];\n                }\n                else if (params.has('search')) {\n                    this.searchQuery = params.get('search');\n                }\n            }\n\n            this.location.search({});\n        }\n\n        buildLocation() {\n            var path = '/';\n\n            if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                path += 'college/' + this.selectedCollege + '/';\n            }\n\n            if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                path += this.selectedProgramType + '/';\n            }\n\n            if (this.searchQuery && this.enabledRoutes.search) {\n                path += 'search/' + this.searchQuery + '/';\n            }\n\n            this.location.path(path);\n        }\n\n        pagination() {\n            var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n            var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n            var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n            // Reset the array\n            this.pages = new Array<number>();\n\n            for(var i = startPage; i <= endPage; i++) {\n                this.pages.push(i);\n            }\n        }\n\n        googleDataLayerUpdate() {\n            if (typeof dataLayer !== 'undefined') {\n                dataLayer.push({\n                    'event': 'degreeSearchFilterChange',\n                    'degreeSearchTerm': this.searchQuery,\n                    'degreeSearchProgramTypes': this.selectedProgramType,\n                    'degreeSearchCollege': this.selectedCollege\n                });\n            }\n        }\n    }\n}\n","module DegreeSearch.Controllers {\n    import Services = DegreeSearch.Services;\n\n    export class ProgramController {\n        static $inject = ['$scope', 'DegreeService'];\n\n        scope: ng.IScope;\n        degreeService: Services.IDegreeService;\n        mainCtl: ng.IRootScopeService;\n        programTypes: Array<any>;\n\n        constructor($scope: ng.IScope, degreeService: Services.IDegreeService) {\n            this.scope = $scope;\n            this.degreeService = degreeService;\n            this.mainCtl = this.scope.$parent.mainCtl;\n            this.programTypes = new Array();\n        }\n\n        init() {\n            if ( UCF_DEGREE_SEARCH_ANGULAR.program_types ) {\n                this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n            }\n\n            this.registerRoutes();\n        }\n\n        registerRoutes() {\n            var programSlugs = new Array<string>();\n\n            this.programTypes.forEach( (type) => {\n                programSlugs.push(type.slug);\n\n                if (type.children.length > 0) {\n                    type.children.forEach( (child) => {\n                        programSlugs.push(child.slug);\n                    });\n                }\n            });\n\n            this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n        }\n\n        onClear() {\n            this.mainCtl.selectedProgramType = 'all';\n            this.mainCtl.selectedProgramTypeDisplay = '';\n            this.mainCtl.selectedParentProgramType = '';\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n\n        onSelected(value) {\n            var selected = this.programTypes.find(x=>x.slug === value);\n            var parent = null;\n\n            if (!selected) {\n                this.programTypes.forEach( (type) => {\n                    var match = type.children.find(c => c.slug === value );\n\n                    if (match) {\n                        selected = match;\n                        parent = type;\n                    }\n                });\n            } else {\n                parent = selected;\n            }\n\n            this.mainCtl.selectedProgramType = selected.slug;\n            this.mainCtl.selectedProgramTypeDisplay = selected.name;\n            this.mainCtl.selectedParentProgramType = parent.slug;\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n    }\n}\n","declare var Handlebars;\n\nfunction stripDegree(input: string): string {\n  return input.replace(' Degree', '').replace(' Degrees', '').replace('Program', '').replace('Programs', '');\n}\n\nfunction capitalize(input: string): string {\n  const splitInput = input.split(' ');\n  const retval = [];\n  const exceptions = [\n    'a', 'an', 'the', 'at', 'by', 'for', 'in', 'of',\n    'on', 'to', 'up', 'and', 'as', 'but', 'or', 'nor'\n  ];\n\n  splitInput.forEach((s, i) => {\n    // Capitalize first and last always\n    if (i === 0 || i === splitInput.length - 1) {\n      retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n    } else if (exceptions.indexOf(s) === -1) {\n      // If it's not an exception, capitalize it\n      retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n    } else {\n      retval[i] = s;\n    }\n  });\n\n  return retval.join(' ');\n}\n\nif (typeof Handlebars !== 'undefined') {\n  Handlebars.registerHelper('stripDegree', stripDegree);\n  Handlebars.registerHelper('capitalize', capitalize);\n}\n","module DegreeSearch.Services {\n    export interface ISearchArgs {\n        programType?: string;\n        college?: string;\n        page?: number;\n        limit?: number;\n    }\n\n    export interface IDegreeService {\n        getDegreeResults(search: string, args: ISearchArgs, successCallback: Function, errorCallback: Function);\n        getProgramTypes(successCallback: Function, errorCallback: Function);\n        getProgramTypesCounts(search: string, college: string, successCallback: Function, errorCallback: Function);\n        getColleges(successCallback: Function, errorCallback: Function);\n        getCollegesCounts(search: string, programType: string, successCallback: Function, errorCallback: Function);\n    }\n\n    export class DegreeService {\n        static $inject = ['$http', '$location'];\n\n        http: ng.IHttpService;\n        location: ng.ILocationService;\n        previousQuery: string;\n        apiUrl: string;\n        limit: number;\n\n        constructor($http: ng.IHttpService, $location: ng.ILocationService) {\n            this.http = $http;\n            this.location = $location;\n            this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n            this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n        }\n\n        public getDegreeResults(query: string, args: ISearchArgs, successCallback: Function, errorCallback: Function) {\n            var params = {\n                search: query,\n                colleges: args.college,\n                program_types: args.programType,\n                page: args.page ? args.page : 1,\n                limit: args.limit ? args.limit : this.limit\n            };\n\n            this.http.get(this.apiUrl + '/degrees', { params: params })\n                .then( (response) => { // Success callback\n                    successCallback(response);\n                }, (response) => { // Error callback\n                    errorCallback(response);\n                });\n        }\n\n        public getProgramTypes(successCallback: Function, errorCallback: Function) {\n            this.http.get(this.apiUrl + '/program-types')\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                });\n        }\n\n        public getProgramTypesCounts(query: string, college:string, successCallback: Function, errorCallback: Function) {\n            var params = {\n                search: query,\n                colleges: college\n            };\n\n            params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n            this.http.get(this.apiUrl + '/program-types/counts', {params: params})\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                });\n        }\n\n        public getColleges(successCallback: Function, errorCallback: Function) {\n            this.http.get(this.apiUrl + '/colleges')\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                })\n        }\n\n        public getCollegesCounts(query: string, programType: string, successCallback: Function, errorCallback: Function) {\n            var params = {\n                search: query,\n                program_types: programType\n            };\n\n            params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n            this.http.get(this.apiUrl + '/colleges/counts', {params: params})\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                });\n        }\n    }\n}\n","module DegreeSearch.Controllers {\n    import Services = DegreeSearch.Services;\n\n    export class CollegeController {\n        static $inject = ['$scope', 'DegreeService'];\n\n        scope: ng.IScope;\n        degreeService: Services.IDegreeService;\n        mainCtl: ng.IRootScopeService;\n        colleges: Array<any>;\n\n        constructor($scope: ng.IScope, degreeService: Services.IDegreeService) {\n            this.scope = $scope;\n            this.degreeService = degreeService;\n            this.mainCtl = this.scope.$parent.mainCtl;\n            this.colleges = new Array();\n        }\n\n        init() {\n            if ( UCF_DEGREE_SEARCH_ANGULAR.colleges ) {\n                this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n            }\n\n            this.registerRoutes();\n        }\n\n        registerRoutes() {\n            this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n        }\n\n        onClear() {\n            this.mainCtl.selectedCollege = 'all';\n            this.mainCtl.selectedCollegeDisplay = '';\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n\n        onSelected(value) {\n            var selected = this.colleges.find(x => x.slug == value);\n            this.mainCtl.selectedCollege = selected.slug;\n            this.mainCtl.selectedCollegeDisplay = selected.fullname;\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n    }\n}\n","module DegreeSearch.Directives {\n    export function searchFormDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: function (scope, atts) {\n          let retval = UCF_DEGREE_SEARCH_ANGULAR.search_form_template;\n          if (atts.placeholder) {\n            retval = retval.replace('{{atts.placeholder}}', atts.placeholder);\n          }\n          return retval;\n        }\n      };\n    }\n\n    export function searchResultsDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n      };\n    }\n\n    export function programTypesDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n      };\n    }\n\n    export function collegesDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n      };\n    }\n\n    export function paginationDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n      };\n    }\n\n    export function resultCountDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n      };\n    }\n\n    export function loadingDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n      };\n    }\n\n    export function noResultsDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n      };\n    }\n}\n","module DegreeSearch.Filters {\n    export function convertEncoding() {\n        return function(input) {\n            return $('<span>').html(input).text();\n        }\n    }\n}\n","declare var UCF_DEGREE_SEARCH_ANGULAR: any;\ndeclare var angular;\ndeclare var angular.ng;\n\nconst app = angular.module('DegreeSearchApp', []).config(['$locationProvider', ($locationProvider: ng.ILocationProvider) => {\n  $locationProvider.html5Mode(true);\n}]);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n\nangular.module('DegreeSearchApp').filter('convertEncoding', DegreeSearch.Filters.convertEncoding);\n"]}