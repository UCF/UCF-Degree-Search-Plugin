{"version":3,"sources":["filters.js","degreeservice.js","maincontroller.js","degreedirectives.js","app.js"],"names":["DegreeSearch","Filters","RangeFilter","input","total","i","push","Services","DegreeService","$http","$location","this","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","prototype","GetDegreeResults","query","args","successCallback","errorCallback","params","search","program_types","programType","page","get","then","response","GetProgramTypes","$inject","Controllers","MainController","$scope","degreeService","_this","scope","programTypes","data","BuildRegExps","SetDefaults","ParsePath","$watch","HandleInput","Array","GetSearchResults","totalResults","selectedProgramType","searchQuery","currentPage","SuccessHandler","ErrorHandler","results","totalPosts","totalPages","startIndex","endIndex","BuildLocation","PreviousPage","NextPage","GoToPage","UpdateFilters","value","programSlugs","forEach","type","slug","routeRegExps","college","RegExp","program","join","default_program_type","default_college","selectedCollege","enabled_routes","enabledRoutes","route","path","matches","exec","Directives","SearchFormDirective","restrict","replace","template","search_form_template","SearchResultsDirective","search_results_template","ProgramTypesDirective","program_types_template","PaginationDirective","pagination_template","ResultCountDirective","result_count_template","LoadingDirective","loading_template","NoResultsDirective","no_results_template","angular","module","controller","service","directive","filter"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Filters) {\n        function RangeFilter() {\n            return function (input, total) {\n                total = total;\n\n                for (var i = 0; i < total; i++) {\n                    input.push(i);\n                }\n\n                return input;\n            };\n        }\n        Filters.RangeFilter = RangeFilter;\n    })(DegreeSearch.Filters || (DegreeSearch.Filters = {}));\n    var Filters = DegreeSearch.Filters;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n            }\n            DegreeService.prototype.GetDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1\n                };\n\n                this.http.get(this.apiUrl, { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.GetProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n\n                this.degreeService.GetProgramTypes(function (response) {\n                    _this.programTypes = response.data;\n                    _this.BuildRegExps();\n                    _this.SetDefaults();\n                    _this.ParsePath();\n                    _this.scope.$watch('mainCtl.searchQuery', function (query) {\n                        _this.HandleInput(query);\n                    });\n                }, function (response) {\n                    _this.programTypes = Array();\n                });\n            }\n            MainController.prototype.GetSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n\n                this.degreeService.GetDegreeResults(this.searchQuery, {\n                    programType: programType,\n                    page: this.currentPage\n                }, function (response) {\n                    _this.SuccessHandler(response);\n                }, function (response) {\n                    _this.ErrorHandler(response);\n                });\n            };\n\n            MainController.prototype.SuccessHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n            };\n\n            MainController.prototype.ErrorHandler = function (response) {\n            };\n\n            MainController.prototype.HandleInput = function (query) {\n                this.searchQuery = query;\n                this.currentPage = 1;\n                this.BuildLocation();\n                this.GetSearchResults();\n            };\n\n            MainController.prototype.PreviousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.GetSearchResults();\n                }\n            };\n\n            MainController.prototype.NextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.GetSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.GoToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.GetSearchResults();\n                }\n            };\n\n            MainController.prototype.UpdateFilters = function (value) {\n                this.selectedProgramType = value;\n                this.currentPage = 1;\n                this.BuildLocation();\n                this.GetSearchResults();\n            };\n\n            MainController.prototype.BuildRegExps = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n                });\n\n                this.routeRegExps = {\n                    college: new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?'),\n                    program: new RegExp('\\/(' + programSlugs.join('|') + ')\\/?'),\n                    search: new RegExp('\\/search\\/(.*)\\/?')\n                };\n            };\n\n            MainController.prototype.SetDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.ParsePath = function () {\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                    }\n                }\n\n                if (this.enabledRoutes.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                    }\n                }\n\n                if (this.enabledRoutes.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    }\n                }\n            };\n\n            MainController.prototype.BuildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college) {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType !== 'any' && this.enabledRoutes.program) {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function SearchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_form_template\n            };\n        }\n        Directives.SearchFormDirective = SearchFormDirective;\n\n        function SearchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.SearchResultsDirective = SearchResultsDirective;\n\n        function ProgramTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.ProgramTypesDirective = ProgramTypesDirective;\n\n        function PaginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.PaginationDirective = PaginationDirective;\n\n        function ResultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.ResultCountDirective = ResultCountDirective;\n\n        function LoadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.LoadingDirective = LoadingDirective;\n\n        function NoResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.NoResultsDirective = NoResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n","angular.module('DegreeSearchApp', []);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.SearchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.SearchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.ProgramTypesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.PaginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.ResultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.LoadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.NoResultsDirective);\n\nangular.module('DegreeSearchApp').filter('range', DegreeSearch.Filters.RangeFilter);\n"]}