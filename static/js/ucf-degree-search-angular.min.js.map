{"version":3,"sources":["degreeservice.js","maincontroller.js","programcontroller.js","collegecontroller.js","degreedirectives.js","app.js"],"names":["DegreeSearch","Services","DegreeService","$http","$location","this","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","prototype","getDegreeResults","query","args","successCallback","errorCallback","params","search","colleges","college","program_types","programType","page","get","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","$inject","Controllers","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","setTimeout","init","registerRoute","setDefaults","parsePath","$watch","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","pagination","previousPage","nextPage","goToPage","RegExp","default_program_type","default_college","enabled_routes","enabledRoutes","forEach","route","path","matches","exec","pagePad","$","document","innerWidth","startPage","endPage","i","push","ProgramController","mainCtl","$parent","programTypes","registerRoutes","setProgramTypes","addHandlers","programSuccess","programError","onQueryChange","programSlugs","type","slug","join","unshift","name","count","onSelected","value","updateCounts","counts","CollegeController","setColleges","collegeSuccess","collegeError","Directives","searchFormDirective","restrict","replace","template","search_form_template","searchResultsDirective","search_results_template","programTypesDirective","program_types_template","collegesDirective","colleges_template","paginationDirective","pagination_template","resultCountDirective","result_count_template","loadingDirective","loading_template","noResultsDirective","no_results_template","angular","module","controller","service","directive"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n                this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n            }\n            DegreeService.prototype.getDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: args.college,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1,\n                    limit: args.limit ? args.limit : this.limit\n                };\n\n                this.http.get(this.apiUrl + '/degrees', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypesCounts = function (query, college, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: college\n                };\n\n                params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n                this.http.get(this.apiUrl + '/program-types/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getColleges = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/colleges').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getCollegesCounts = function (query, programType, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    program_types: programType\n                };\n\n                params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n                this.http.get(this.apiUrl + '/colleges/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n                this.pages = new Array();\n                this.routeRegExps = {\n                    college: null,\n                    program: null,\n                    search: null\n                };\n\n                setTimeout(function () {\n                    _this.init();\n                }, 0);\n            }\n            MainController.prototype.init = function () {\n                var _this = this;\n                this.registerRoute();\n                this.setDefaults();\n                this.parsePath();\n                this.scope.$watch('mainCtl.searchQuery', function (query) {\n                    _this.handleInput(query);\n                });\n                this.getSearchResults();\n            };\n\n            MainController.prototype.getSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n                var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n                this.degreeService.getDegreeResults(this.searchQuery, {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                }, function (response) {\n                    _this.successHandler(response);\n                }, function (response) {\n                    _this.errorHandler(response);\n                });\n            };\n\n            MainController.prototype.successHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n                this.buildLocation();\n                this.pagination();\n            };\n\n            MainController.prototype.errorHandler = function (response) {\n                this.results = {};\n            };\n\n            MainController.prototype.handleInput = function (query) {\n                this.searchQuery = query;\n                this.currentPage = 1;\n                this.buildLocation();\n                this.getSearchResults();\n            };\n\n            MainController.prototype.previousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.nextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.getSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.goToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.registerRoute = function () {\n                this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n            };\n\n            MainController.prototype.setDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.parsePath = function () {\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college && this.routeRegExps.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                    }\n                }\n\n                if (this.enabledRoutes.program && this.routeRegExps.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                    }\n                }\n\n                if (this.enabledRoutes.search && this.routeRegExps.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    }\n                }\n            };\n\n            MainController.prototype.buildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n\n                this.location.path(path);\n            };\n\n            MainController.prototype.pagination = function () {\n                var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n                var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n                var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n                // Reset the array\n                this.pages = new Array();\n\n                for (var i = startPage; i <= endPage; i++) {\n                    this.pages.push(i);\n                }\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var ProgramController = (function () {\n            function ProgramController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.programTypes = new Array();\n            }\n            ProgramController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.program_types) {\n                    this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n                }\n\n                this.registerRoutes();\n            };\n\n            ProgramController.prototype.setProgramTypes = function (init) {\n                var _this = this;\n                if (typeof init === \"undefined\") { init = false; }\n                this.degreeService.getProgramTypes(function (response) {\n                    if (init) {\n                        _this.addHandlers();\n                    }\n\n                    _this.programSuccess(response);\n                }, function (response) {\n                    _this.programError(response);\n                });\n            };\n\n            ProgramController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (query) {\n                    _this.onQueryChange();\n                });\n                this.scope.$watch('mainCtl.selectedCollege', function () {\n                    _this.onQueryChange();\n                });\n            };\n\n            ProgramController.prototype.registerRoutes = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n                });\n\n                this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n            };\n\n            ProgramController.prototype.programSuccess = function (response) {\n                this.programTypes = response.data;\n                this.programTypes.unshift({\n                    name: 'All',\n                    slug: 'all',\n                    count: this.mainCtl.totalResults\n                });\n            };\n\n            ProgramController.prototype.programError = function (response) {\n                this.programTypes = new Array();\n            };\n\n            ProgramController.prototype.onSelected = function (value) {\n                this.mainCtl.selectedProgramType = value;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            ProgramController.prototype.onQueryChange = function () {\n                var _this = this;\n                this.degreeService.getProgramTypesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedCollege, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    // Error occurred. Remove count.\n                    _this.programTypes.forEach(function (type) {\n                        type.count = null;\n                    });\n                });\n            };\n\n            ProgramController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                this.programTypes.forEach(function (type) {\n                    if (typeof counts[type.slug] !== 'undefined') {\n                        type.count = counts[type.slug];\n                    } else {\n                        type.count = 0;\n                    }\n                });\n            };\n            ProgramController.$inject = ['$scope', 'DegreeService'];\n            return ProgramController;\n        })();\n        Controllers.ProgramController = ProgramController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var CollegeController = (function () {\n            function CollegeController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.colleges = new Array();\n            }\n            CollegeController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.colleges) {\n                    this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n                }\n\n                this.registerRoutes();\n            };\n\n            CollegeController.prototype.setColleges = function (init) {\n                var _this = this;\n                if (typeof init === \"undefined\") { init = false; }\n                this.degreeService.getColleges(function (response) {\n                    if (init) {\n                        _this.addHandlers();\n                    }\n                    _this.collegeSuccess(response);\n                }, function (response) {\n                    _this.collegeError(response);\n                });\n            };\n\n            CollegeController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function () {\n                    _this.onQueryChange();\n                });\n                this.scope.$watch('mainCtl.selectedProgramType', function () {\n                    _this.onQueryChange();\n                });\n            };\n\n            CollegeController.prototype.registerRoutes = function () {\n                this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n            };\n\n            CollegeController.prototype.collegeSuccess = function (response) {\n                this.colleges = response.data;\n                this.colleges.unshift({\n                    name: 'All',\n                    slug: 'all',\n                    count: this.mainCtl.totalResults\n                });\n            };\n\n            CollegeController.prototype.collegeError = function (response) {\n                this.colleges = new Array();\n            };\n\n            CollegeController.prototype.onSelected = function (value) {\n                this.mainCtl.selectedCollege = value;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n                this.onQueryChange();\n            };\n\n            CollegeController.prototype.onQueryChange = function () {\n                var _this = this;\n                this.degreeService.getCollegesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedProgramType, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    _this.colleges.forEach(function (college) {\n                        college.count = null;\n                    });\n                });\n            };\n\n            CollegeController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                this.colleges.forEach(function (college) {\n                    if (typeof counts[college.slug] !== 'undefined') {\n                        college.count = counts[college.slug];\n                    } else {\n                        college.count = 0;\n                    }\n                });\n            };\n            CollegeController.$inject = ['$scope', 'DegreeService'];\n            return CollegeController;\n        })();\n        Controllers.CollegeController = CollegeController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function searchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_form_template\n            };\n        }\n        Directives.searchFormDirective = searchFormDirective;\n\n        function searchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.searchResultsDirective = searchResultsDirective;\n\n        function programTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.programTypesDirective = programTypesDirective;\n\n        function collegesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n            };\n        }\n        Directives.collegesDirective = collegesDirective;\n\n        function paginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.paginationDirective = paginationDirective;\n\n        function resultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.resultCountDirective = resultCountDirective;\n\n        function loadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.loadingDirective = loadingDirective;\n\n        function noResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.noResultsDirective = noResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n","angular.module('DegreeSearchApp', []);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n"]}