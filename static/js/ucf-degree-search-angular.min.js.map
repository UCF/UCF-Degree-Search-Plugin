{"version":3,"sources":["utils.js","degreeservice.js","maincontroller.js","programcontroller.js","collegecontroller.js","degreedirectives.js","encodingfilter.js","app.js"],"names":["DegreeSearch","Utils","CapitalizeString","input","splitInput","split","retval","exceptions","forEach","s","i","length","charAt","toUpperCase","substr","toLowerCase","indexOf","join","Services","DegreeService","$http","$location","this","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","prototype","getDegreeResults","query","args","successCallback","errorCallback","params","search","colleges","college","program_types","programType","page","get","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","$inject","Controllers","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","updateHeading","update_heading","updateTitle","update_title","setTimeout","init","registerRoute","setDefaults","parsePath","$heading","$","$watch","newValue","oldValue","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","buildResultMessage","pagination","googleDataLayerUpdate","setHeading","setTitle","resultMessage","setWpSpeak","selectedProgramTypeDisplay","selectedCollegeDisplay","message","wp","a11y","speak","headingString","queryString","html","title","prefix","suffix","push","replace","prefixString","suffixString","document","newVal","oldVal","previousPage","nextPage","goToPage","RegExp","default_program_type","default_college","enabled_routes","enabledRoutes","route","path","matches","exec","find","x","slug","fullname","plural","pagePad","innerWidth","startPage","endPage","dataLayer","event","degreeSearchTerm","degreeSearchProgramTypes","degreeSearchCollege","ProgramController","mainCtl","$parent","programTypes","addHandlers","registerRoutes","onQueryChange","programSlugs","type","onSelected","value","selected","updateCounts","count","counts","all","CollegeController","Directives","searchFormDirective","restrict","template","atts","search_form_template","placeholder","searchResultsDirective","search_results_template","programTypesDirective","program_types_template","collegesDirective","colleges_template","paginationDirective","pagination_template","resultCountDirective","result_count_template","loadingDirective","loading_template","noResultsDirective","no_results_template","Filters","convertEncoding","text","angular","module","controller","service","directive","filter"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["var DegreeSearch;\n(function (DegreeSearch) {\n    var Utils = (function () {\n        function Utils() {\n        }\n        Utils.CapitalizeString = function (input) {\n            var splitInput = input.split(' '), retval = [], exceptions = ['a', 'an', 'the', 'at', 'by', 'for', 'in', 'of', 'on', 'to', 'up', 'and', 'as', 'but', 'or', 'nor'];\n\n            splitInput.forEach(function (s, i) {\n                if (i === 0 || i === splitInput.length - 1) {\n                    retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n                } else {\n                    if (exceptions.indexOf(s) === -1) {\n                        retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n                    } else {\n                        retval[i] = s;\n                    }\n                }\n            });\n\n            return retval.join(' ');\n        };\n        return Utils;\n    })();\n    DegreeSearch.Utils = Utils;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n                this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n            }\n            DegreeService.prototype.getDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: args.college,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1,\n                    limit: args.limit ? args.limit : this.limit\n                };\n\n                this.http.get(this.apiUrl + '/degrees', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypesCounts = function (query, college, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: college\n                };\n\n                params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n                this.http.get(this.apiUrl + '/program-types/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getColleges = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/colleges').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getCollegesCounts = function (query, programType, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    program_types: programType\n                };\n\n                params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n                this.http.get(this.apiUrl + '/colleges/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var Utils = DegreeSearch.Utils;\n\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n                this.pages = new Array();\n                this.routeRegExps = {\n                    college: null,\n                    program: null,\n                    search: null\n                };\n\n                this.updateHeading = UCF_DEGREE_SEARCH_ANGULAR.update_heading;\n                this.updateTitle = UCF_DEGREE_SEARCH_ANGULAR.update_title;\n\n                setTimeout(function () {\n                    _this.init();\n                }, 0);\n            }\n            MainController.prototype.init = function () {\n                var _this = this;\n                this.registerRoute();\n                this.setDefaults();\n                this.parsePath();\n\n                if (this.updateHeading) {\n                    this.$heading = $('h1');\n                }\n                this.scope.$watch('mainCtl.searchQuery', function (newValue, oldValue) {\n                    _this.handleInput(newValue, oldValue);\n                });\n                this.getSearchResults();\n            };\n\n            MainController.prototype.getSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n                var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n                this.degreeService.getDegreeResults(this.searchQuery, {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                }, function (response) {\n                    _this.successHandler(response);\n                }, function (response) {\n                    _this.errorHandler(response);\n                });\n            };\n\n            MainController.prototype.successHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n                this.buildLocation();\n                this.buildResultMessage();\n                this.pagination();\n                this.googleDataLayerUpdate();\n\n                if (this.updateHeading) {\n                    this.setHeading();\n                }\n\n                if (this.updateTitle) {\n                    this.setTitle();\n                }\n            };\n\n            MainController.prototype.errorHandler = function (response) {\n                this.results = {};\n            };\n\n            MainController.prototype.buildResultMessage = function () {\n                if (this.totalResults === 0) {\n                    this.resultMessage = '';\n                    this.setWpSpeak(\"No results found for \" + this.searchQuery);\n                } else {\n                    this.resultMessage = \"Showing \" + this.startIndex + \" through \" + this.endIndex + \" of \" + this.totalResults + \" results\";\n\n                    if (this.searchQuery && this.searchQuery !== '') {\n                        this.resultMessage += \" for \" + this.searchQuery;\n                    }\n\n                    if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                        this.resultMessage += \" in \" + this.selectedProgramTypeDisplay;\n                    }\n\n                    if (this.selectedCollege && this.selectedCollege !== 'all') {\n                        this.resultMessage += \" at the \" + this.selectedCollegeDisplay;\n                    }\n\n                    this.resultMessage += \" at UCF.\";\n\n                    this.setWpSpeak(this.resultMessage);\n                }\n            };\n\n            MainController.prototype.setWpSpeak = function (message) {\n                wp.a11y.speak(message);\n            };\n\n            MainController.prototype.setHeading = function () {\n                var headingString = 'Degree Search', queryString = Utils.CapitalizeString(this.searchQuery);\n\n                if (queryString) {\n                    headingString += ' - ' + queryString + ' Programs at UCF';\n                }\n\n                this.$heading.html(headingString);\n            };\n\n            MainController.prototype.setTitle = function () {\n                var title = 'Degree Search', prefix = [], suffix = [];\n\n                if (this.searchQuery && this.searchQuery !== '') {\n                    prefix.push(Utils.CapitalizeString(this.searchQuery));\n                }\n\n                if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                    suffix.push(this.selectedProgramTypeDisplay.replace(' Degrees', ''));\n                }\n\n                if (this.selectedCollege && this.selectedCollege !== 'all') {\n                    suffix.push(this.selectedCollegeDisplay);\n                }\n\n                var prefixString = prefix.join(' ') + ' ' + title;\n                var suffixString = suffix.join(', ') + ' Degrees';\n\n                if (suffixString.length === 0) {\n                    suffixString = 'University of Central Florida Academic Programs';\n                }\n\n                document.title = prefixString + ' | ' + suffixString;\n            };\n\n            MainController.prototype.handleInput = function (newVal, oldVal) {\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.searchQuery = newVal;\n                this.currentPage = 1;\n                this.buildLocation();\n                this.getSearchResults();\n            };\n\n            MainController.prototype.previousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.nextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.getSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.goToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.registerRoute = function () {\n                this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n            };\n\n            MainController.prototype.setDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.parsePath = function () {\n                var _this = this;\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college && this.routeRegExps.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                        var college = UCF_DEGREE_SEARCH_ANGULAR.colleges.find(function (x) {\n                            return x.slug == _this.selectedCollege;\n                        });\n                        this.selectedCollegeDisplay = college.fullname;\n                    }\n                }\n\n                if (this.enabledRoutes.program && this.routeRegExps.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                        var programType = UCF_DEGREE_SEARCH_ANGULAR.program_types.find(function (x) {\n                            return x.slug == _this.selectedProgramType;\n                        });\n                        this.selectedProgramTypeDisplay = programType.plural;\n                    }\n                }\n\n                if (this.enabledRoutes.search && this.routeRegExps.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    }\n                }\n            };\n\n            MainController.prototype.buildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n\n                this.location.path(path);\n            };\n\n            MainController.prototype.pagination = function () {\n                var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n                var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n                var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n                // Reset the array\n                this.pages = new Array();\n\n                for (var i = startPage; i <= endPage; i++) {\n                    this.pages.push(i);\n                }\n            };\n\n            MainController.prototype.googleDataLayerUpdate = function () {\n                if (typeof dataLayer !== 'undefined') {\n                    dataLayer.push({\n                        'event': 'degreeSearchFilterChange',\n                        'degreeSearchTerm': this.searchQuery,\n                        'degreeSearchProgramTypes': this.selectedProgramType,\n                        'degreeSearchCollege': this.selectedCollege\n                    });\n                }\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var ProgramController = (function () {\n            function ProgramController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.programTypes = new Array();\n\n                this.addHandlers();\n            }\n            ProgramController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.program_types) {\n                    this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n                }\n\n                this.registerRoutes();\n            };\n\n            ProgramController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n                this.scope.$watch('mainCtl.selectedCollege', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n            };\n\n            ProgramController.prototype.registerRoutes = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n                });\n\n                this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n            };\n\n            ProgramController.prototype.onSelected = function (value) {\n                var selected = this.programTypes.find(function (x) {\n                    return x.slug === value;\n                });\n                this.mainCtl.selectedProgramType = selected.slug;\n                this.mainCtl.selectedProgramTypeDisplay = selected.plural;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            ProgramController.prototype.onQueryChange = function (newVal, oldVal) {\n                var _this = this;\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.degreeService.getProgramTypesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedCollege, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    // Error occurred. Remove count.\n                    _this.programTypes.forEach(function (type) {\n                        type.count = null;\n                    });\n                });\n            };\n\n            ProgramController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                if (counts.all === 0) {\n                    return;\n                }\n\n                this.programTypes.forEach(function (type) {\n                    if (typeof counts[type.slug] !== 'undefined') {\n                        type.count = counts[type.slug];\n                    } else {\n                        type.count = 0;\n                    }\n                });\n            };\n            ProgramController.$inject = ['$scope', 'DegreeService'];\n            return ProgramController;\n        })();\n        Controllers.ProgramController = ProgramController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var CollegeController = (function () {\n            function CollegeController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.colleges = new Array();\n\n                this.addHandlers();\n            }\n            CollegeController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.colleges) {\n                    this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n                }\n\n                this.registerRoutes();\n            };\n\n            CollegeController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n                this.scope.$watch('mainCtl.selectedProgramType', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n            };\n\n            CollegeController.prototype.registerRoutes = function () {\n                this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n            };\n\n            CollegeController.prototype.onSelected = function (value) {\n                var selected = this.colleges.find(function (x) {\n                    return x.slug == value;\n                });\n                this.mainCtl.selectedCollege = selected.slug;\n                this.mainCtl.selectedCollegeDisplay = selected.fullname;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            CollegeController.prototype.onQueryChange = function (newVal, oldVal) {\n                var _this = this;\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.degreeService.getCollegesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedProgramType, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    _this.colleges.forEach(function (college) {\n                        college.count = null;\n                    });\n                });\n            };\n\n            CollegeController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                if (counts.all === 0) {\n                    return;\n                }\n\n                this.colleges.forEach(function (college) {\n                    if (typeof counts[college.slug] !== 'undefined') {\n                        college.count = counts[college.slug];\n                    } else {\n                        college.count = 0;\n                    }\n                });\n            };\n            CollegeController.$inject = ['$scope', 'DegreeService'];\n            return CollegeController;\n        })();\n        Controllers.CollegeController = CollegeController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function searchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: function (scope, atts) {\n                    var retval = UCF_DEGREE_SEARCH_ANGULAR.search_form_template;\n                    if (atts.placeholder) {\n                        retval = retval.replace('{{atts.placeholder}}', atts.placeholder);\n                    }\n                    return retval;\n                }\n            };\n        }\n        Directives.searchFormDirective = searchFormDirective;\n\n        function searchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.searchResultsDirective = searchResultsDirective;\n\n        function programTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.programTypesDirective = programTypesDirective;\n\n        function collegesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n            };\n        }\n        Directives.collegesDirective = collegesDirective;\n\n        function paginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.paginationDirective = paginationDirective;\n\n        function resultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.resultCountDirective = resultCountDirective;\n\n        function loadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.loadingDirective = loadingDirective;\n\n        function noResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.noResultsDirective = noResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Filters) {\n        function convertEncoding() {\n            return function (input) {\n                return $('<span>').html(input).text();\n            };\n        }\n        Filters.convertEncoding = convertEncoding;\n    })(DegreeSearch.Filters || (DegreeSearch.Filters = {}));\n    var Filters = DegreeSearch.Filters;\n})(DegreeSearch || (DegreeSearch = {}));\n","angular.module('DegreeSearchApp', []);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n\nangular.module('DegreeSearchApp').filter('convertEncoding', DegreeSearch.Filters.convertEncoding);\n"]}