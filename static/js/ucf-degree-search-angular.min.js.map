{"version":3,"sources":["filters.js","degreeservice.js","maincontroller.js","programcontroller.js","collegecontroller.js","degreedirectives.js","app.js"],"names":["DegreeSearch","Filters","RangeFilter","input","total","i","push","Services","DegreeService","$http","$location","this","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","prototype","GetDegreeResults","query","args","successCallback","errorCallback","params","search","colleges","college","program_types","programType","page","get","then","response","GetProgramTypes","GetProgramTypesCounts","GetColleges","GetCollegesCounts","$inject","Controllers","MainController","$scope","degreeService","_this","scope","routeRegExps","program","RegisterRoute","SetDefaults","ParsePath","$watch","HandleInput","GetSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","SuccessHandler","ErrorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","BuildLocation","PreviousPage","NextPage","GoToPage","UpdateFilters","value","RegExp","default_program_type","default_college","enabled_routes","enabledRoutes","forEach","route","path","matches","exec","ProgramController","mainCtl","$parent","programTypes","Array","SetProgramTypes","init","AddHandlers","ProgramSuccess","RegisterRoutes","ProgramError","OnQueryChange","programSlugs","type","slug","join","OnSelected","console","log","UpdateCounts","counts","count","CollegeController","SetColleges","CollegeSuccess","CollegeError","Directives","SearchFormDirective","restrict","replace","template","search_form_template","SearchResultsDirective","search_results_template","ProgramTypesDirective","program_types_template","CollegesDirective","colleges_template","PaginationDirective","pagination_template","ResultCountDirective","result_count_template","LoadingDirective","loading_template","NoResultsDirective","no_results_template","angular","module","controller","service","directive","filter"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Filters) {\n        function RangeFilter() {\n            return function (input, total) {\n                total = total;\n\n                for (var i = 0; i < total; i++) {\n                    input.push(i);\n                }\n\n                return input;\n            };\n        }\n        Filters.RangeFilter = RangeFilter;\n    })(DegreeSearch.Filters || (DegreeSearch.Filters = {}));\n    var Filters = DegreeSearch.Filters;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n            }\n            DegreeService.prototype.GetDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: args.college,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1\n                };\n\n                this.http.get(this.apiUrl + '/degrees', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.GetProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.GetProgramTypesCounts = function (query, successCallback, errorCallback) {\n                var params = {\n                    search: query\n                };\n\n                this.http.get(this.apiUrl + '/program-types/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.GetColleges = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/colleges').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.GetCollegesCounts = function (query, successCallback, errorCallback) {\n                var params = {\n                    search: query\n                };\n\n                this.http.get(this.apiUrl + '/colleges/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n                this.routeRegExps = {\n                    college: null,\n                    program: null,\n                    search: null\n                };\n\n                this.RegisterRoute();\n                this.SetDefaults();\n                this.ParsePath();\n                this.scope.$watch('mainCtl.searchQuery', function (query) {\n                    _this.HandleInput(query);\n                });\n            }\n            MainController.prototype.GetSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n                var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n                this.degreeService.GetDegreeResults(this.searchQuery, {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                }, function (response) {\n                    _this.SuccessHandler(response);\n                }, function (response) {\n                    _this.ErrorHandler(response);\n                });\n            };\n\n            MainController.prototype.SuccessHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n                this.BuildLocation();\n            };\n\n            MainController.prototype.ErrorHandler = function (response) {\n                this.results = {};\n            };\n\n            MainController.prototype.HandleInput = function (query) {\n                this.searchQuery = query;\n                this.currentPage = 1;\n                this.BuildLocation();\n                this.GetSearchResults();\n            };\n\n            MainController.prototype.PreviousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.GetSearchResults();\n                }\n            };\n\n            MainController.prototype.NextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.GetSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.GoToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.GetSearchResults();\n                }\n            };\n\n            MainController.prototype.UpdateFilters = function (value) {\n                this.selectedProgramType = value;\n                this.currentPage = 1;\n                this.BuildLocation();\n                this.GetSearchResults();\n            };\n\n            MainController.prototype.RegisterRoute = function () {\n                this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n            };\n\n            MainController.prototype.SetDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.ParsePath = function () {\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college && this.routeRegExps.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                    }\n                }\n\n                if (this.enabledRoutes.program && this.routeRegExps.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                    }\n                }\n\n                if (this.enabledRoutes.search && this.routeRegExps.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    }\n                }\n            };\n\n            MainController.prototype.BuildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college) {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType && this.enabledRoutes.program) {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n\n                this.location.path(path);\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var ProgramController = (function () {\n            function ProgramController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.programTypes = new Array();\n                this.SetProgramTypes(true);\n            }\n            ProgramController.prototype.SetProgramTypes = function (init) {\n                var _this = this;\n                if (typeof init === \"undefined\") { init = false; }\n                this.degreeService.GetProgramTypes(function (response) {\n                    if (init) {\n                        _this.AddHandlers();\n                    }\n\n                    _this.ProgramSuccess(response);\n                    _this.RegisterRoutes();\n                }, function (response) {\n                    _this.ProgramError(response);\n                });\n            };\n\n            ProgramController.prototype.AddHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (query) {\n                    _this.OnQueryChange(query);\n                });\n            };\n\n            ProgramController.prototype.RegisterRoutes = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n                });\n\n                this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n            };\n\n            ProgramController.prototype.ProgramSuccess = function (response) {\n                this.programTypes = response.data;\n            };\n\n            ProgramController.prototype.ProgramError = function (response) {\n                this.programTypes = new Array();\n            };\n\n            ProgramController.prototype.OnSelected = function (value) {\n                this.mainCtl.selectedProgramType = value;\n                this.mainCtl.page = 1;\n                this.mainCtl.GetSearchResults();\n            };\n\n            ProgramController.prototype.OnQueryChange = function (query) {\n                var _this = this;\n                console.log(query);\n\n                if (query) {\n                    this.degreeService.GetProgramTypesCounts(query, function (response) {\n                        _this.UpdateCounts(response);\n                    }, function (response) {\n                        console.log(response);\n                    });\n                } else {\n                    this.SetProgramTypes();\n                }\n            };\n\n            ProgramController.prototype.UpdateCounts = function (response) {\n                var counts = response.data;\n\n                this.programTypes.forEach(function (type) {\n                    if (typeof counts[type.slug] !== 'undefined') {\n                        type.count = counts[type.slug];\n                    } else {\n                        type.count = 0;\n                    }\n                });\n            };\n            ProgramController.$inject = ['$scope', 'DegreeService'];\n            return ProgramController;\n        })();\n        Controllers.ProgramController = ProgramController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var CollegeController = (function () {\n            function CollegeController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.colleges = new Array();\n                this.SetColleges(true);\n            }\n            CollegeController.prototype.SetColleges = function (init) {\n                var _this = this;\n                if (typeof init === \"undefined\") { init = false; }\n                this.degreeService.GetColleges(function (response) {\n                    if (init) {\n                        _this.AddHandlers();\n                    }\n                    _this.CollegeSuccess(response);\n                    _this.RegisterRoutes();\n                }, function (response) {\n                    _this.CollegeError(response);\n                });\n            };\n\n            CollegeController.prototype.AddHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (query) {\n                    _this.OnQueryChange(query);\n                });\n            };\n\n            CollegeController.prototype.RegisterRoutes = function () {\n                this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n            };\n\n            CollegeController.prototype.CollegeSuccess = function (response) {\n                this.colleges = response.data;\n            };\n\n            CollegeController.prototype.CollegeError = function (response) {\n                this.colleges = new Array();\n            };\n\n            CollegeController.prototype.OnSelected = function (value) {\n                this.mainCtl.selectedCollege = value;\n                this.mainCtl.page = 1;\n                this.mainCtl.GetSearchResults();\n            };\n\n            CollegeController.prototype.OnQueryChange = function (query) {\n                var _this = this;\n                console.log(query);\n\n                if (query) {\n                    this.degreeService.GetCollegesCounts(query, function (response) {\n                        _this.UpdateCounts(response);\n                    }, function (response) {\n                        console.log(response);\n                    });\n                } else {\n                    this.SetColleges();\n                }\n            };\n\n            CollegeController.prototype.UpdateCounts = function (response) {\n                var counts = response.data;\n\n                this.colleges.forEach(function (college) {\n                    if (typeof counts[college.slug] !== 'undefined') {\n                        college.count = counts[college.slug];\n                    } else {\n                        college.count = 0;\n                    }\n                });\n            };\n            CollegeController.$inject = ['$scope', 'DegreeService'];\n            return CollegeController;\n        })();\n        Controllers.CollegeController = CollegeController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function SearchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_form_template\n            };\n        }\n        Directives.SearchFormDirective = SearchFormDirective;\n\n        function SearchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.SearchResultsDirective = SearchResultsDirective;\n\n        function ProgramTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.ProgramTypesDirective = ProgramTypesDirective;\n\n        function CollegesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n            };\n        }\n        Directives.CollegesDirective = CollegesDirective;\n\n        function PaginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.PaginationDirective = PaginationDirective;\n\n        function ResultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.ResultCountDirective = ResultCountDirective;\n\n        function LoadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.LoadingDirective = LoadingDirective;\n\n        function NoResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.NoResultsDirective = NoResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n","angular.module('DegreeSearchApp', []);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.SearchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.SearchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.ProgramTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.CollegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.PaginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.ResultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.LoadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.NoResultsDirective);\n\nangular.module('DegreeSearchApp').filter('range', DegreeSearch.Filters.RangeFilter);\n"]}