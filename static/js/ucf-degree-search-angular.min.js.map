{"version":3,"sources":["degreeservice.js","maincontroller.js","programcontroller.js","collegecontroller.js","degreedirectives.js","encodingfilter.js","app.js"],"names":["DegreeSearch","Services","DegreeService","$http","$location","this","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","prototype","getDegreeResults","query","args","successCallback","errorCallback","params","search","colleges","college","program_types","programType","page","get","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","$inject","Controllers","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","updateHeading","update_heading","setTimeout","init","registerRoute","setDefaults","parsePath","$heading","$","$watch","newValue","oldValue","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","buildResultMessage","pagination","setHeading","resultMessage","setWpSpeak","selectedProgramTypeDisplay","selectedCollegeDisplay","message","wp","a11y","speak","headingString","text","newVal","oldVal","previousPage","nextPage","goToPage","RegExp","default_program_type","default_college","enabled_routes","enabledRoutes","forEach","route","path","matches","exec","find","x","slug","fullname","plural","pagePad","document","innerWidth","startPage","endPage","i","push","ProgramController","mainCtl","$parent","programTypes","addHandlers","registerRoutes","onQueryChange","programSlugs","type","join","onSelected","value","selected","updateCounts","count","counts","all","CollegeController","Directives","searchFormDirective","restrict","replace","template","atts","retval","search_form_template","placeholder","searchResultsDirective","search_results_template","programTypesDirective","program_types_template","collegesDirective","colleges_template","paginationDirective","pagination_template","resultCountDirective","result_count_template","loadingDirective","loading_template","noResultsDirective","no_results_template","Filters","convertEncoding","input","html","angular","module","controller","service","directive","filter"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Services) {\n        var DegreeService = (function () {\n            function DegreeService($http, $location) {\n                this.http = $http;\n                this.location = $location;\n                this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n                this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n            }\n            DegreeService.prototype.getDegreeResults = function (query, args, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: args.college,\n                    program_types: args.programType,\n                    page: args.page ? args.page : 1,\n                    limit: args.limit ? args.limit : this.limit\n                };\n\n                this.http.get(this.apiUrl + '/degrees', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypes = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/program-types').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getProgramTypesCounts = function (query, college, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    colleges: college\n                };\n\n                params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n                this.http.get(this.apiUrl + '/program-types/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getColleges = function (successCallback, errorCallback) {\n                this.http.get(this.apiUrl + '/colleges').then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n\n            DegreeService.prototype.getCollegesCounts = function (query, programType, successCallback, errorCallback) {\n                var params = {\n                    search: query,\n                    program_types: programType\n                };\n\n                params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n                this.http.get(this.apiUrl + '/colleges/counts', { params: params }).then(function (response) {\n                    successCallback(response);\n                }, function (response) {\n                    errorCallback(response);\n                });\n            };\n            DegreeService.$inject = ['$http', '$location'];\n            return DegreeService;\n        })();\n        Services.DegreeService = DegreeService;\n    })(DegreeSearch.Services || (DegreeSearch.Services = {}));\n    var Services = DegreeSearch.Services;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var MainController = (function () {\n            function MainController($scope, $location, degreeService) {\n                var _this = this;\n                this.scope = $scope;\n                this.location = $location;\n                this.degreeService = degreeService;\n                this.pages = new Array();\n                this.routeRegExps = {\n                    college: null,\n                    program: null,\n                    search: null\n                };\n\n                this.updateHeading = UCF_DEGREE_SEARCH_ANGULAR.update_heading;\n\n                setTimeout(function () {\n                    _this.init();\n                }, 0);\n            }\n            MainController.prototype.init = function () {\n                var _this = this;\n                this.registerRoute();\n                this.setDefaults();\n                this.parsePath();\n                if (this.updateHeading) {\n                    this.$heading = $('h1');\n                }\n                this.scope.$watch('mainCtl.searchQuery', function (newValue, oldValue) {\n                    _this.handleInput(newValue, oldValue);\n                });\n                this.getSearchResults();\n            };\n\n            MainController.prototype.getSearchResults = function () {\n                var _this = this;\n                this.totalResults = null;\n\n                var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n                var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n                this.degreeService.getDegreeResults(this.searchQuery, {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                }, function (response) {\n                    _this.successHandler(response);\n                }, function (response) {\n                    _this.errorHandler(response);\n                });\n            };\n\n            MainController.prototype.successHandler = function (response) {\n                this.results = response.data;\n                this.totalResults = this.results.totalPosts;\n                this.currentPage = this.results.currentPage;\n                this.totalPages = this.results.totalPages;\n                this.startIndex = this.results.startIndex;\n                this.endIndex = this.results.endIndex;\n                this.buildLocation();\n                this.buildResultMessage();\n                this.pagination();\n\n                if (this.updateHeading) {\n                    this.setHeading();\n                }\n            };\n\n            MainController.prototype.errorHandler = function (response) {\n                this.results = {};\n            };\n\n            MainController.prototype.buildResultMessage = function () {\n                if (this.totalResults === 0) {\n                    this.resultMessage = '';\n                    this.setWpSpeak(\"No results found for \" + this.searchQuery);\n                } else {\n                    this.resultMessage = \"Showing \" + this.startIndex + \" through \" + this.endIndex + \" of \" + this.totalResults + \" results\";\n\n                    if (this.searchQuery && this.searchQuery !== '') {\n                        this.resultMessage += \" for \" + this.searchQuery;\n                    }\n\n                    if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                        this.resultMessage += \" in \" + this.selectedProgramTypeDisplay;\n                    }\n\n                    if (this.selectedCollege && this.selectedCollege !== 'all') {\n                        this.resultMessage += \" at the \" + this.selectedCollegeDisplay;\n                    }\n\n                    this.resultMessage += \" at UCF.\";\n\n                    this.setWpSpeak(this.resultMessage);\n                }\n            };\n\n            MainController.prototype.setWpSpeak = function (message) {\n                wp.a11y.speak(message);\n            };\n\n            MainController.prototype.setHeading = function () {\n                var headingString = 'Degree Search';\n\n                if (this.searchQuery) {\n                    headingString += ' - ' + this.searchQuery + ' Programs at UCF';\n                }\n\n                this.$heading.text(headingString);\n            };\n\n            MainController.prototype.handleInput = function (newVal, oldVal) {\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.searchQuery = newVal;\n                this.currentPage = 1;\n                this.buildLocation();\n                this.getSearchResults();\n            };\n\n            MainController.prototype.previousPage = function () {\n                this.currentPage--;\n\n                if (this.currentPage < 1) {\n                    this.currentPage = 1;\n                } else {\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.nextPage = function () {\n                this.currentPage++;\n\n                if (this.currentPage <= this.totalPages) {\n                    this.getSearchResults();\n                } else {\n                    this.currentPage--;\n                }\n            };\n\n            MainController.prototype.goToPage = function (page) {\n                if (page >= 1 && page <= this.totalPages) {\n                    this.currentPage = page;\n                    this.getSearchResults();\n                }\n            };\n\n            MainController.prototype.registerRoute = function () {\n                this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n            };\n\n            MainController.prototype.setDefaults = function () {\n                var _this = this;\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                    this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                    this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n                }\n\n                if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                    // Set defaults.\n                    this.enabledRoutes = {\n                        college: false,\n                        program: false,\n                        search: false\n                    };\n\n                    UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(function (route) {\n                        _this.enabledRoutes[route] = true;\n                    });\n                } else {\n                    this.enabledRoutes = {\n                        college: true,\n                        program: true,\n                        search: true\n                    };\n                }\n            };\n\n            MainController.prototype.parsePath = function () {\n                var _this = this;\n                var path = this.location.path();\n\n                if (this.enabledRoutes.college && this.routeRegExps.college) {\n                    var matches = this.routeRegExps.college.exec(path);\n                    if (matches) {\n                        this.selectedCollege = matches[1];\n                        var college = UCF_DEGREE_SEARCH_ANGULAR.colleges.find(function (x) {\n                            return x.slug == _this.selectedCollege;\n                        });\n                        this.selectedCollegeDisplay = college.fullname;\n                    }\n                }\n\n                if (this.enabledRoutes.program && this.routeRegExps.program) {\n                    var matches = this.routeRegExps.program.exec(path);\n                    if (matches) {\n                        this.selectedProgramType = matches[1];\n                        var programType = UCF_DEGREE_SEARCH_ANGULAR.program_types.find(function (x) {\n                            return x.slug == _this.selectedProgramType;\n                        });\n                        this.selectedProgramTypeDisplay = programType.plural;\n                    }\n                }\n\n                if (this.enabledRoutes.search && this.routeRegExps.search) {\n                    var matches = this.routeRegExps.search.exec(path);\n                    if (matches) {\n                        this.searchQuery = matches[1];\n                    }\n                }\n            };\n\n            MainController.prototype.buildLocation = function () {\n                var path = '/';\n\n                if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                    path += 'college/' + this.selectedCollege + '/';\n                }\n\n                if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                    path += this.selectedProgramType + '/';\n                }\n\n                if (this.searchQuery && this.enabledRoutes.search) {\n                    path += 'search/' + this.searchQuery + '/';\n                }\n\n                this.location.path(path);\n            };\n\n            MainController.prototype.pagination = function () {\n                var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n                var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n                var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n                // Reset the array\n                this.pages = new Array();\n\n                for (var i = startPage; i <= endPage; i++) {\n                    this.pages.push(i);\n                }\n            };\n            MainController.$inject = ['$scope', '$location', 'DegreeService'];\n            return MainController;\n        })();\n        Controllers.MainController = MainController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var ProgramController = (function () {\n            function ProgramController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.programTypes = new Array();\n\n                this.addHandlers();\n            }\n            ProgramController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.program_types) {\n                    this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n                }\n\n                this.registerRoutes();\n            };\n\n            ProgramController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n                this.scope.$watch('mainCtl.selectedCollege', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n            };\n\n            ProgramController.prototype.registerRoutes = function () {\n                var programSlugs = new Array();\n\n                this.programTypes.forEach(function (type) {\n                    programSlugs.push(type.slug);\n                });\n\n                this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n            };\n\n            ProgramController.prototype.onSelected = function (value) {\n                var selected = this.programTypes.find(function (x) {\n                    return x.slug === value;\n                });\n                this.mainCtl.selectedProgramType = selected.slug;\n                this.mainCtl.selectedProgramTypeDisplay = selected.plural;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            ProgramController.prototype.onQueryChange = function (newVal, oldVal) {\n                var _this = this;\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.degreeService.getProgramTypesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedCollege, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    // Error occurred. Remove count.\n                    _this.programTypes.forEach(function (type) {\n                        type.count = null;\n                    });\n                });\n            };\n\n            ProgramController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                if (counts.all === 0) {\n                    return;\n                }\n\n                this.programTypes.forEach(function (type) {\n                    if (typeof counts[type.slug] !== 'undefined') {\n                        type.count = counts[type.slug];\n                    } else {\n                        type.count = 0;\n                    }\n                });\n            };\n            ProgramController.$inject = ['$scope', 'DegreeService'];\n            return ProgramController;\n        })();\n        Controllers.ProgramController = ProgramController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Controllers) {\n        var CollegeController = (function () {\n            function CollegeController($scope, degreeService) {\n                this.scope = $scope;\n                this.degreeService = degreeService;\n                this.mainCtl = this.scope.$parent.mainCtl;\n                this.colleges = new Array();\n\n                this.addHandlers();\n            }\n            CollegeController.prototype.init = function () {\n                if (UCF_DEGREE_SEARCH_ANGULAR.colleges) {\n                    this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n                }\n\n                this.registerRoutes();\n            };\n\n            CollegeController.prototype.addHandlers = function () {\n                var _this = this;\n                this.scope.$watch('mainCtl.searchQuery', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n                this.scope.$watch('mainCtl.selectedProgramType', function (newVal, oldVal) {\n                    _this.onQueryChange(newVal, oldVal);\n                });\n            };\n\n            CollegeController.prototype.registerRoutes = function () {\n                this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n            };\n\n            CollegeController.prototype.onSelected = function (value) {\n                var selected = this.colleges.find(function (x) {\n                    return x.slug == value;\n                });\n                this.mainCtl.selectedCollege = selected.slug;\n                this.mainCtl.selectedCollegeDisplay = selected.fullname;\n                this.mainCtl.currentPage = 1;\n                this.mainCtl.getSearchResults();\n            };\n\n            CollegeController.prototype.onQueryChange = function (newVal, oldVal) {\n                var _this = this;\n                if (newVal === oldVal) {\n                    return;\n                }\n\n                this.degreeService.getCollegesCounts(this.mainCtl.searchQuery, this.mainCtl.selectedProgramType, function (response) {\n                    _this.updateCounts(response);\n                }, function (response) {\n                    _this.colleges.forEach(function (college) {\n                        college.count = null;\n                    });\n                });\n            };\n\n            CollegeController.prototype.updateCounts = function (response) {\n                var counts = response.data;\n\n                if (counts.all === 0) {\n                    return;\n                }\n\n                this.colleges.forEach(function (college) {\n                    if (typeof counts[college.slug] !== 'undefined') {\n                        college.count = counts[college.slug];\n                    } else {\n                        college.count = 0;\n                    }\n                });\n            };\n            CollegeController.$inject = ['$scope', 'DegreeService'];\n            return CollegeController;\n        })();\n        Controllers.CollegeController = CollegeController;\n    })(DegreeSearch.Controllers || (DegreeSearch.Controllers = {}));\n    var Controllers = DegreeSearch.Controllers;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Directives) {\n        function searchFormDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: function (scope, atts) {\n                    var retval = UCF_DEGREE_SEARCH_ANGULAR.search_form_template;\n                    if (atts.placeholder) {\n                        retval = retval.replace('{{atts.placeholder}}', atts.placeholder);\n                    }\n                    return retval;\n                }\n            };\n        }\n        Directives.searchFormDirective = searchFormDirective;\n\n        function searchResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n            };\n        }\n        Directives.searchResultsDirective = searchResultsDirective;\n\n        function programTypesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n            };\n        }\n        Directives.programTypesDirective = programTypesDirective;\n\n        function collegesDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n            };\n        }\n        Directives.collegesDirective = collegesDirective;\n\n        function paginationDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n            };\n        }\n        Directives.paginationDirective = paginationDirective;\n\n        function resultCountDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n            };\n        }\n        Directives.resultCountDirective = resultCountDirective;\n\n        function loadingDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n            };\n        }\n        Directives.loadingDirective = loadingDirective;\n\n        function noResultsDirective() {\n            return {\n                restrict: 'E',\n                replace: true,\n                template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n            };\n        }\n        Directives.noResultsDirective = noResultsDirective;\n    })(DegreeSearch.Directives || (DegreeSearch.Directives = {}));\n    var Directives = DegreeSearch.Directives;\n})(DegreeSearch || (DegreeSearch = {}));\n","var DegreeSearch;\n(function (DegreeSearch) {\n    (function (Filters) {\n        function convertEncoding() {\n            return function (input) {\n                return $('<span>').html(input).text();\n            };\n        }\n        Filters.convertEncoding = convertEncoding;\n    })(DegreeSearch.Filters || (DegreeSearch.Filters = {}));\n    var Filters = DegreeSearch.Filters;\n})(DegreeSearch || (DegreeSearch = {}));\n","angular.module('DegreeSearchApp', []);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n\nangular.module('DegreeSearchApp').filter('convertEncoding', DegreeSearch.Filters.convertEncoding);\n"]}