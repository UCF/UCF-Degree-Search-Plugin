{"version":3,"sources":["controllers/maincontroller.ts","controllers/programcontroller.ts","handlebar-helpers.ts","services/degreeservice.ts","controllers/collegecontroller.ts","directives/degreedirectives.ts","filters/encodingfilter.ts","app.ts"],"names":["input","replace","split","s","i","splitInput","length","indexOf","charAt","toUpperCase","substr","toLowerCase","join","self","nativeURLSearchParams","URLSearchParams","get","e","a","toString","decodesPlusesCorrectly","__URLSearchParams__","encodesAmpersandsCorrectly","ampersandTest","append","prototype","URLSearchParamsPolyfill","iterable","Symbol","iterator","search","parseToDict","str","'","(","~","%20","match","arr","value","shift","done","undefined","item","isArray","TypeError","appendTo","dict","key","hasOwnProperty","slice","j","pairs","index","decode","name","JSON","stringify","push","val","Object","call","obj","prop","isSupportObjectConstructor","this","has","query","encode","Proxy","useProxy","construct","target","args","USPProto","forEach","callback","thisArg","sort","k","keys","values","items","makeIterator","entries","global","window","Handlebars","registerHelper","stripDegree","capitalize","DegreeSearch","Services","DegreeService","$http","$location","http","location","apiUrl","UCF_DEGREE_SEARCH_ANGULAR","remote_path","limit","getDegreeResults","successCallback","errorCallback","params","colleges","college","program_types","programType","page","then","response","getProgramTypes","getProgramTypesCounts","getColleges","getCollegesCounts","$inject","MainController","$scope","degreeService","_this","scope","pages","Array","routeRegExps","program","hasFilters","updateHeading","update_heading","updateTitle","update_title","setTimeout","init","registerRoute","setDefaults","parsePath","$watch","newValue","oldValue","handleInput","getSearchResults","totalResults","selectedProgramType","selectedCollege","searchQuery","currentPage","successHandler","errorHandler","results","data","totalPosts","totalPages","startIndex","endIndex","buildLocation","buildResultMessage","pagination","googleDataLayerUpdate","setHeading","setTitle","resultMessage","setWpSpeak","selectedProgramTypeDisplay","selectedCollegeDisplay","message","wp","a11y","speak","headingTemplate","heading_template","headingFn","compile","$heading","html","titleTemplate","title_template","titleFn","document","title","newVal","oldVal","previousPage","nextPage","goToPage"],"mappings":"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","file":"ucf-degree-search-angular.min.js","sourcesContent":["module DegreeSearch.Controllers {\n    import Services = DegreeSearch.Services;\n\n    export class MainController {\n        static $inject = ['$scope', '$location', 'DegreeService'];\n\n        scope: ng.IScope;\n        location: ng.ILocationService;\n        degreeService: Services.IDegreeService;\n        results: any;\n        updateHeading: boolean;\n        updateTitle: boolean;\n\n        selectedParentProgramType: string;\n        selectedProgramType: string;\n        selectedProgramTypeDisplay: string;\n        selectedCollege: string;\n        selectedCollegeDisplay: string;\n\n        routeRegExps: {\n            college?: RegExp;\n            program?: RegExp;\n            search?: RegExp;\n        };\n\n        enabledRoutes: {\n            college: boolean;\n            program: boolean;\n            search: boolean;\n        }\n\n        searchQuery: string;\n        programTypes: Array<any>;\n        totalResults: number;\n        currentPage: number;\n        pages: Array<number>;\n        totalPages: number;\n        startIndex: number;\n        endIndex: number;\n        resultMessage: string;\n\n        // Helper parameter for handlebars\n        hasFilters: boolean;\n\n        $heading: any;\n\n        constructor($scope: ng.IScope, $location: ng.ILocationService, degreeService: Services.IDegreeService) {\n            this.scope = $scope;\n            this.location = $location;\n            this.degreeService = degreeService;\n            this.pages = new Array<number>();\n            this.routeRegExps = {\n                college: null,\n                program: null,\n                search: null\n            };\n            this.hasFilters = false;\n\n            this.updateHeading = UCF_DEGREE_SEARCH_ANGULAR.update_heading;\n            this.updateTitle = UCF_DEGREE_SEARCH_ANGULAR.update_title;\n\n            setTimeout( () => { this.init() }, 0);\n        }\n\n        init() {\n            this.registerRoute();\n            this.setDefaults();\n            this.parsePath();\n\n            if (this.updateHeading) {\n                this.$heading = $('h1');\n            }\n            this.scope.$watch('mainCtl.searchQuery', (newValue, oldValue) => { this.handleInput( newValue, oldValue ) });\n            this.getSearchResults();\n        }\n\n        getSearchResults() {\n            this.totalResults = null;\n\n            var programType = this.selectedProgramType === 'all' ? '' : this.selectedProgramType;\n            var college = this.selectedCollege === 'all' ? '' : this.selectedCollege;\n\n            if (this.searchQuery || this.selectedProgramType || this.selectedCollege) {\n                this.hasFilters = true;\n            } else {\n                this.hasFilters = false;\n            }\n\n            this.degreeService.getDegreeResults(\n                this.searchQuery,\n                {\n                    college: college,\n                    page: this.currentPage,\n                    programType: programType\n                },\n                (response) => {\n                    this.successHandler(response);\n                },\n                (response) => {\n                    this.errorHandler(response);\n                }\n            );\n        }\n\n        successHandler(response) {\n            this.results = response.data;\n            this.totalResults = this.results.totalPosts;\n            this.currentPage = this.results.currentPage;\n            this.totalPages = this.results.totalPages;\n            this.startIndex = this.results.startIndex;\n            this.endIndex = this.results.endIndex;\n            this.buildLocation();\n            this.buildResultMessage();\n            this.pagination();\n            this.googleDataLayerUpdate();\n\n            if (this.updateHeading) {\n                this.setHeading();\n            }\n\n            if (this.updateTitle) {\n                this.setTitle();\n            }\n        }\n\n        errorHandler(response) {\n            this.results = {};\n        }\n\n        buildResultMessage() {\n            if (this.totalResults === 0) {\n                this.resultMessage = '';\n                this.setWpSpeak(\"No results found for \" + this.searchQuery);\n            } else {\n                this.resultMessage = \"Showing \" + this.startIndex + \" through \" + this.endIndex + \" of \" + this.totalResults + \" results\";\n\n                if (this.searchQuery && this.searchQuery !== '') {\n                    this.resultMessage += \" for \" + this.searchQuery;\n                }\n\n                if (this.selectedProgramType && this.selectedProgramType !== 'all') {\n                    this.resultMessage += \" in \" + this.selectedProgramTypeDisplay;\n                }\n\n                if (this.selectedCollege && this.selectedCollege !== 'all') {\n                    this.resultMessage += \" at the \" + this.selectedCollegeDisplay;\n                }\n\n                this.resultMessage += \" at UCF.\";\n\n                this.setWpSpeak(this.resultMessage);\n            }\n        }\n\n        setWpSpeak(message) {\n            wp.a11y.speak(message);\n        }\n\n        setHeading() {\n            var headingTemplate = UCF_DEGREE_SEARCH_ANGULAR.heading_template,\n                headingFn = Handlebars.compile(headingTemplate);\n\n            this.$heading.html(headingFn(this));\n        }\n\n        setTitle() {\n            var titleTemplate = UCF_DEGREE_SEARCH_ANGULAR.title_template,\n                titleFn = Handlebars.compile(titleTemplate);\n\n            document.title = titleFn(this);\n        }\n\n        handleInput(newVal, oldVal) {\n            if  ( newVal === oldVal ) {\n                return;\n            }\n\n            this.searchQuery = newVal;\n            this.currentPage = 1;\n            this.buildLocation();\n            this.getSearchResults();\n        }\n\n        previousPage() {\n            this.currentPage--;\n\n            if ( this.currentPage < 1 ) {\n                this.currentPage = 1;\n            } else {\n                this.getSearchResults();\n            }\n        }\n\n        nextPage() {\n            this.currentPage++;\n\n            if ( this.currentPage <= this.totalPages ) {\n                this.getSearchResults();\n            } else {\n                this.currentPage--;\n            }\n        }\n\n        goToPage(page: number) {\n            if ( page >= 1 && page <= this.totalPages ) {\n                this.currentPage = page;\n                this.getSearchResults();\n            }\n        }\n\n        registerRoute() {\n            this.routeRegExps.search = new RegExp('\\/search\\/([\\\\w\\\\s]*)\\/?');\n        }\n\n        setDefaults() {\n            if (UCF_DEGREE_SEARCH_ANGULAR.default_program_type) {\n                this.selectedProgramType = UCF_DEGREE_SEARCH_ANGULAR.default_program_type;\n            }\n\n            if (UCF_DEGREE_SEARCH_ANGULAR.default_college) {\n                this.selectedCollege = UCF_DEGREE_SEARCH_ANGULAR.default_college;\n            }\n\n            if (UCF_DEGREE_SEARCH_ANGULAR.enabled_routes) {\n                // Set defaults.\n                this.enabledRoutes = {\n                    college: false,\n                    program: false,\n                    search: false\n                };\n\n                UCF_DEGREE_SEARCH_ANGULAR.enabled_routes.forEach(route => {\n                    this.enabledRoutes[route] = true;\n                });\n\n            } else {\n                this.enabledRoutes = {\n                    college: true,\n                    program: true,\n                    search: true\n                };\n            }\n        }\n\n        parsePath() {\n            // Parse query params\n            var params = new URLSearchParams(location.search);\n\n            var path = this.location.path();\n\n            if (this.enabledRoutes.college && this.routeRegExps.college) {\n                var matches = this.routeRegExps.college.exec(path);\n                if ( matches ) {\n                    this.selectedCollege = matches[1];\n                } else if (params.has('college[0]')) {\n                    this.selectedCollege = params.get('college[0]');\n                } else if (params.has('colleges')) {\n                    this.selectedCollege = params.get('colleges');\n                }\n\n                if (this.selectedCollege ) {\n                    var college = UCF_DEGREE_SEARCH_ANGULAR.colleges.find(x=>x.slug == this.selectedCollege);\n                    if (college) {\n                        this.selectedCollegeDisplay = college.fullname;\n                    }\n                }\n            }\n\n            if (this.enabledRoutes.program && this.routeRegExps.program) {\n\n                var matches = this.routeRegExps.program.exec(path);\n                if (matches) {\n                    this.selectedProgramType = matches[1];\n                } else if (params.has('program-type[0]')) {\n                    this.selectedProgramType = params.get('program-type[0]');\n                } else if (params.has('program_types')) {\n                    this.selectedProgramType = params.get('program_types');\n                }\n\n                if (this.selectedProgramType) {\n                    var selected = UCF_DEGREE_SEARCH_ANGULAR.program_types.find(x=>x.slug === this.selectedProgramType);\n                    var parent = null;\n\n                    if (!selected) {\n                        UCF_DEGREE_SEARCH_ANGULAR.program_types.forEach( (type) => {\n                            var match = type.children.find(c => c.slug === this.selectedProgramType);\n\n                            if (match) {\n                                selected = match;\n                                parent = type;\n                            }\n                        });\n                    } else {\n                        parent = selected;\n                    }\n\n                    this.selectedParentProgramType = parent.slug;\n                    this.selectedProgramTypeDisplay = selected.name;\n                }\n\n                this.location.search({});\n            }\n\n            if (this.enabledRoutes.search && this.routeRegExps.search) {\n                var matches = this.routeRegExps.search.exec(path);\n                if (matches) {\n                    this.searchQuery = matches[1];\n                }\n                else if (params.has('search')) {\n                    this.searchQuery = params.get('search');\n                }\n            }\n\n            this.location.search({});\n        }\n\n        buildLocation() {\n            var path = '/';\n\n            if (this.selectedCollege && this.enabledRoutes.college && this.selectedCollege !== 'all') {\n                path += 'college/' + this.selectedCollege + '/';\n            }\n\n            if (this.selectedProgramType && this.enabledRoutes.program && this.selectedProgramType !== 'all') {\n                path += this.selectedProgramType + '/';\n            }\n\n            if (this.searchQuery && this.enabledRoutes.search) {\n                path += 'search/' + this.searchQuery + '/';\n            }\n\n            this.location.path(path);\n        }\n\n        pagination() {\n            var pagePad = $(document).innerWidth() < 768 ? 2 : 4;\n\n            var startPage = this.currentPage - pagePad < 1 ? 1 : this.currentPage - pagePad;\n            var endPage = this.currentPage + pagePad > this.totalPages ? this.totalPages : this.currentPage + pagePad;\n\n            // Reset the array\n            this.pages = new Array<number>();\n\n            for(var i = startPage; i <= endPage; i++) {\n                this.pages.push(i);\n            }\n        }\n\n        googleDataLayerUpdate() {\n            if (typeof dataLayer !== 'undefined') {\n                dataLayer.push({\n                    'event': 'degreeSearchFilterChange',\n                    'degreeSearchTerm': this.searchQuery,\n                    'degreeSearchProgramTypes': this.selectedProgramType,\n                    'degreeSearchCollege': this.selectedCollege\n                });\n            }\n        }\n    }\n}\n","module DegreeSearch.Controllers {\n    import Services = DegreeSearch.Services;\n\n    export class ProgramController {\n        static $inject = ['$scope', 'DegreeService'];\n\n        scope: ng.IScope;\n        degreeService: Services.IDegreeService;\n        mainCtl: ng.IRootScopeService;\n        programTypes: Array<any>;\n\n        constructor($scope: ng.IScope, degreeService: Services.IDegreeService) {\n            this.scope = $scope;\n            this.degreeService = degreeService;\n            this.mainCtl = this.scope.$parent.mainCtl;\n            this.programTypes = new Array();\n        }\n\n        init() {\n            if ( UCF_DEGREE_SEARCH_ANGULAR.program_types ) {\n                this.programTypes = UCF_DEGREE_SEARCH_ANGULAR.program_types;\n            }\n\n            this.registerRoutes();\n        }\n\n        registerRoutes() {\n            var programSlugs = new Array<string>();\n\n            this.programTypes.forEach( (type) => {\n                programSlugs.push(type.slug);\n\n                if (type.children.length > 0) {\n                    type.children.forEach( (child) => {\n                        programSlugs.push(child.slug);\n                    });\n                }\n            });\n\n            this.mainCtl.routeRegExps.program = new RegExp('\\/(' + programSlugs.join('|') + ')\\/?');\n        }\n\n        onClear() {\n            this.mainCtl.selectedProgramType = 'all';\n            this.mainCtl.selectedProgramTypeDisplay = '';\n            this.mainCtl.selectedParentProgramType = '';\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n\n        onSelected(value) {\n            var selected = this.programTypes.find(x=>x.slug === value);\n            var parent = null;\n\n            if (!selected) {\n                this.programTypes.forEach( (type) => {\n                    var match = type.children.find(c => c.slug === value );\n\n                    if (match) {\n                        selected = match;\n                        parent = type;\n                    }\n                });\n            } else {\n                parent = selected;\n            }\n\n            this.mainCtl.selectedProgramType = selected.slug;\n            this.mainCtl.selectedProgramTypeDisplay = selected.name;\n            this.mainCtl.selectedParentProgramType = parent.slug;\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n    }\n}\n","function stripDegree(input: string): string {\n  return input.replace(' Degree', '').replace(' Degrees', '').replace('Program', '').replace('Programs', '');\n}\n\nfunction capitalize(input: string): string {\n  const splitInput = input.split(' ');\n  const retval = [];\n  const exceptions = [\n    'a', 'an', 'the', 'at', 'by', 'for', 'in', 'of',\n    'on', 'to', 'up', 'and', 'as', 'but', 'or', 'nor'\n  ];\n\n  splitInput.forEach((s, i) => {\n    // Capitalize first and last always\n    if (i === 0 || i === splitInput.length - 1) {\n      retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n    } else if (exceptions.indexOf(s) === -1) {\n      // If it's not an exception, capitalize it\n      retval[i] = s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();\n    } else {\n      retval[i] = s;\n    }\n  });\n\n  return retval.join(' ');\n}\n\nif (typeof Handlebars !== 'undefined') {\n  Handlebars.registerHelper('stripDegree', stripDegree);\n  Handlebars.registerHelper('capitalize', capitalize);\n}\n","module DegreeSearch.Services {\n    export interface ISearchArgs {\n        programType?: string;\n        college?: string;\n        page?: number;\n        limit?: number;\n    }\n\n    export interface IDegreeService {\n        getDegreeResults(search: string, args: ISearchArgs, successCallback: Function, errorCallback: Function);\n        getProgramTypes(successCallback: Function, errorCallback: Function);\n        getProgramTypesCounts(search: string, college: string, successCallback: Function, errorCallback: Function);\n        getColleges(successCallback: Function, errorCallback: Function);\n        getCollegesCounts(search: string, programType: string, successCallback: Function, errorCallback: Function);\n    }\n\n    export class DegreeService {\n        static $inject = ['$http', '$location'];\n\n        http: ng.IHttpService;\n        location: ng.ILocationService;\n        previousQuery: string;\n        apiUrl: string;\n        limit: number;\n\n        constructor($http: ng.IHttpService, $location: ng.ILocationService) {\n            this.http = $http;\n            this.location = $location;\n            this.apiUrl = UCF_DEGREE_SEARCH_ANGULAR.remote_path;\n            this.limit = UCF_DEGREE_SEARCH_ANGULAR.limit;\n        }\n\n        public getDegreeResults(query: string, args: ISearchArgs, successCallback: Function, errorCallback: Function) {\n            var params = {\n                search: query,\n                colleges: args.college,\n                program_types: args.programType,\n                page: args.page ? args.page : 1,\n                limit: args.limit ? args.limit : this.limit\n            };\n\n            this.http.get(this.apiUrl + '/degrees', { params: params })\n                .then( (response) => { // Success callback\n                    successCallback(response);\n                }, (response) => { // Error callback\n                    errorCallback(response);\n                });\n        }\n\n        public getProgramTypes(successCallback: Function, errorCallback: Function) {\n            this.http.get(this.apiUrl + '/program-types')\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                });\n        }\n\n        public getProgramTypesCounts(query: string, college:string, successCallback: Function, errorCallback: Function) {\n            var params = {\n                search: query,\n                colleges: college\n            };\n\n            params.colleges = params.colleges === 'all' ? '' : params.colleges;\n\n            this.http.get(this.apiUrl + '/program-types/counts', {params: params})\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                });\n        }\n\n        public getColleges(successCallback: Function, errorCallback: Function) {\n            this.http.get(this.apiUrl + '/colleges')\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                })\n        }\n\n        public getCollegesCounts(query: string, programType: string, successCallback: Function, errorCallback: Function) {\n            var params = {\n                search: query,\n                program_types: programType\n            };\n\n            params.program_types = params.program_types === 'all' ? '' : params.program_types;\n\n            this.http.get(this.apiUrl + '/colleges/counts', {params: params})\n                .then( (response) => {\n                    successCallback(response);\n                }, (response) => {\n                    errorCallback(response);\n                });\n        }\n    }\n}\n","module DegreeSearch.Controllers {\n    import Services = DegreeSearch.Services;\n\n    export class CollegeController {\n        static $inject = ['$scope', 'DegreeService'];\n\n        scope: ng.IScope;\n        degreeService: Services.IDegreeService;\n        mainCtl: ng.IRootScopeService;\n        colleges: Array<any>;\n\n        constructor($scope: ng.IScope, degreeService: Services.IDegreeService) {\n            this.scope = $scope;\n            this.degreeService = degreeService;\n            this.mainCtl = this.scope.$parent.mainCtl;\n            this.colleges = new Array();\n        }\n\n        init() {\n            if ( UCF_DEGREE_SEARCH_ANGULAR.colleges ) {\n                this.colleges = UCF_DEGREE_SEARCH_ANGULAR.colleges;\n            }\n\n            this.registerRoutes();\n        }\n\n        registerRoutes() {\n            this.mainCtl.routeRegExps.college = new RegExp('\\/college\\/([a-zA-Z-_]*)\\/?');\n        }\n\n        onClear() {\n            this.mainCtl.selectedCollege = 'all';\n            this.mainCtl.selectedCollegeDisplay = '';\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n\n        onSelected(value) {\n            var selected = this.colleges.find(x => x.slug == value);\n            this.mainCtl.selectedCollege = selected.slug;\n            this.mainCtl.selectedCollegeDisplay = selected.fullname;\n            this.mainCtl.currentPage = 1;\n            this.mainCtl.getSearchResults();\n        }\n    }\n}\n","module DegreeSearch.Directives {\n    export function searchFormDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: function (scope, atts) {\n          let retval = UCF_DEGREE_SEARCH_ANGULAR.search_form_template;\n          if (atts.placeholder) {\n            retval = retval.replace('{{atts.placeholder}}', atts.placeholder);\n          }\n          return retval;\n        }\n      };\n    }\n\n    export function searchResultsDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.search_results_template\n      };\n    }\n\n    export function programTypesDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.program_types_template\n      };\n    }\n\n    export function collegesDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.colleges_template\n      };\n    }\n\n    export function paginationDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.pagination_template\n      };\n    }\n\n    export function resultCountDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.result_count_template\n      };\n    }\n\n    export function loadingDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.loading_template\n      };\n    }\n\n    export function noResultsDirective() : ng.IDirective {\n      return {\n        restrict: 'E',\n        replace: true,\n        template: UCF_DEGREE_SEARCH_ANGULAR.no_results_template\n      };\n    }\n}\n","module DegreeSearch.Filters {\n    export function convertEncoding() {\n        return function(input) {\n            return $('<span>').html(input).text();\n        }\n    }\n}\n","const app = angular.module('DegreeSearchApp', []).config(['$locationProvider', ($locationProvider: ng.ILocationProvider) => {\n  $locationProvider.html5Mode(true);\n}]);\n\nangular.module('DegreeSearchApp').controller('MainController', DegreeSearch.Controllers.MainController);\nangular.module('DegreeSearchApp').controller('ProgramController', DegreeSearch.Controllers.ProgramController);\nangular.module('DegreeSearchApp').controller('CollegeController', DegreeSearch.Controllers.CollegeController);\n\nangular.module('DegreeSearchApp').service('DegreeService', DegreeSearch.Services.DegreeService);\n\nangular.module('DegreeSearchApp').directive('searchForm', DegreeSearch.Directives.searchFormDirective);\nangular.module('DegreeSearchApp').directive('searchResults', DegreeSearch.Directives.searchResultsDirective);\nangular.module('DegreeSearchApp').directive('programTypeFilters', DegreeSearch.Directives.programTypesDirective);\nangular.module('DegreeSearchApp').directive('collegeFilters', DegreeSearch.Directives.collegesDirective);\nangular.module('DegreeSearchApp').directive('pagination', DegreeSearch.Directives.paginationDirective);\nangular.module('DegreeSearchApp').directive('resultCount', DegreeSearch.Directives.resultCountDirective);\nangular.module('DegreeSearchApp').directive('loading', DegreeSearch.Directives.loadingDirective);\nangular.module('DegreeSearchApp').directive('noResults', DegreeSearch.Directives.noResultsDirective);\n\nangular.module('DegreeSearchApp').filter('convertEncoding', DegreeSearch.Filters.convertEncoding);\n"]}